#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\NormalMapEffect_PSNormalPixelLightingTxNoSpec.pdb
; shader hash: 3732397de4100db0a6f55d56c99cf638
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTxNoSpec() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.f32 %18, 2
  %22 = fsub fast float %19, %12
  %23 = fsub fast float %20, %13
  %24 = fsub fast float %21, %14
  %25 = call float @dx.op.dot3.f32(i32 55, float %22, float %23, float %24, float %22, float %23, float %24)  ; Dot3(ax,ay,az,bx,by,bz)
  %26 = call float @dx.op.unary.f32(i32 25, float %25)  ; Rsqrt(value)
  %27 = fmul fast float %22, %26
  %28 = fmul fast float %23, %26
  %29 = fmul fast float %24, %26
  %30 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %31 = extractvalue %dx.types.ResRet.f32 %30, 0
  %32 = extractvalue %dx.types.ResRet.f32 %30, 1
  %33 = fmul fast float %31, 2.000000e+00
  %34 = fmul fast float %32, 2.000000e+00
  %35 = fadd fast float %33, -1.000000e+00
  %36 = fadd fast float %34, -1.000000e+00
  %37 = call float @dx.op.dot2.f32(i32 54, float %35, float %36, float %35, float %36)  ; Dot2(ax,ay,bx,by)
  %38 = fsub fast float 1.000000e+00, %37
  %39 = call float @dx.op.unary.f32(i32 24, float %38)  ; Sqrt(value)
  %40 = call float @dx.op.unary.f32(i32 83, float %12)  ; DerivCoarseX(value)
  %41 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %42 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %43 = call float @dx.op.unary.f32(i32 84, float %12)  ; DerivCoarseY(value)
  %44 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %45 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %46 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %47 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %48 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %49 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %50 = fmul fast float %45, %41
  %51 = fmul fast float %44, %42
  %52 = fsub fast float %50, %51
  %53 = fmul fast float %43, %42
  %54 = fmul fast float %45, %40
  %55 = fsub fast float %53, %54
  %56 = fmul fast float %44, %40
  %57 = fmul fast float %43, %41
  %58 = fsub fast float %56, %57
  %59 = fmul fast float %58, %44
  %60 = fmul fast float %55, %45
  %61 = fsub fast float %59, %60
  %62 = fmul fast float %52, %45
  %63 = fmul fast float %58, %43
  %64 = fsub fast float %62, %63
  %65 = fmul fast float %55, %43
  %66 = fmul fast float %52, %44
  %67 = fsub fast float %65, %66
  %68 = fmul fast float %55, %42
  %69 = fmul fast float %58, %41
  %70 = fsub fast float %68, %69
  %71 = fmul fast float %58, %40
  %72 = fmul fast float %52, %42
  %73 = fsub fast float %71, %72
  %74 = fmul fast float %52, %41
  %75 = fmul fast float %55, %40
  %76 = fsub fast float %74, %75
  %77 = fmul fast float %61, %46
  %78 = call float @dx.op.tertiary.f32(i32 46, float %48, float %70, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %64, %46
  %80 = call float @dx.op.tertiary.f32(i32 46, float %48, float %73, float %79)  ; FMad(a,b,c)
  %81 = fmul fast float %67, %46
  %82 = call float @dx.op.tertiary.f32(i32 46, float %48, float %76, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.dot3.f32(i32 55, float %78, float %80, float %82, float %78, float %80, float %82)  ; Dot3(ax,ay,az,bx,by,bz)
  %84 = call float @dx.op.unary.f32(i32 25, float %83)  ; Rsqrt(value)
  %85 = fmul fast float %61, %47
  %86 = call float @dx.op.tertiary.f32(i32 46, float %49, float %70, float %85)  ; FMad(a,b,c)
  %87 = fmul fast float %64, %47
  %88 = call float @dx.op.tertiary.f32(i32 46, float %49, float %73, float %87)  ; FMad(a,b,c)
  %89 = fmul fast float %67, %47
  %90 = call float @dx.op.tertiary.f32(i32 46, float %49, float %76, float %89)  ; FMad(a,b,c)
  %91 = call float @dx.op.dot3.f32(i32 55, float %86, float %88, float %90, float %86, float %88, float %90)  ; Dot3(ax,ay,az,bx,by,bz)
  %92 = call float @dx.op.unary.f32(i32 25, float %91)  ; Rsqrt(value)
  %93 = fmul fast float %92, %86
  %94 = fmul fast float %92, %88
  %95 = fmul fast float %92, %90
  %96 = fmul fast float %78, %35
  %97 = fmul fast float %96, %84
  %98 = call float @dx.op.tertiary.f32(i32 46, float %36, float %93, float %97)  ; FMad(a,b,c)
  %99 = call float @dx.op.tertiary.f32(i32 46, float %39, float %9, float %98)  ; FMad(a,b,c)
  %100 = fmul fast float %80, %35
  %101 = fmul fast float %100, %84
  %102 = call float @dx.op.tertiary.f32(i32 46, float %36, float %94, float %101)  ; FMad(a,b,c)
  %103 = call float @dx.op.tertiary.f32(i32 46, float %39, float %10, float %102)  ; FMad(a,b,c)
  %104 = fmul fast float %82, %35
  %105 = fmul fast float %104, %84
  %106 = call float @dx.op.tertiary.f32(i32 46, float %36, float %95, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.tertiary.f32(i32 46, float %39, float %11, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.dot3.f32(i32 55, float %99, float %103, float %107, float %99, float %103, float %107)  ; Dot3(ax,ay,az,bx,by,bz)
  %109 = call float @dx.op.unary.f32(i32 25, float %108)  ; Rsqrt(value)
  %110 = fmul fast float %109, %99
  %111 = fmul fast float %109, %103
  %112 = fmul fast float %109, %107
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = fsub fast float %27, %114
  %126 = fsub fast float %28, %115
  %127 = fsub fast float %29, %116
  %128 = call float @dx.op.dot3.f32(i32 55, float %125, float %126, float %127, float %125, float %126, float %127)  ; Dot3(ax,ay,az,bx,by,bz)
  %129 = call float @dx.op.unary.f32(i32 25, float %128)  ; Rsqrt(value)
  %130 = fmul fast float %129, %126
  %131 = fmul fast float %129, %127
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 0
  %134 = extractvalue %dx.types.CBufRet.f32 %132, 1
  %135 = extractvalue %dx.types.CBufRet.f32 %132, 2
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = fsub fast float %27, %133
  %145 = fsub fast float %28, %134
  %146 = fsub fast float %29, %135
  %147 = call float @dx.op.dot3.f32(i32 55, float %144, float %145, float %146, float %144, float %145, float %146)  ; Dot3(ax,ay,az,bx,by,bz)
  %148 = call float @dx.op.unary.f32(i32 25, float %147)  ; Rsqrt(value)
  %149 = fmul fast float %148, %145
  %150 = fmul fast float %148, %146
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %154 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = extractvalue %dx.types.CBufRet.f32 %159, 1
  %162 = extractvalue %dx.types.CBufRet.f32 %159, 2
  %163 = fsub fast float %27, %152
  %164 = fsub fast float %28, %153
  %165 = fsub fast float %29, %154
  %166 = call float @dx.op.dot3.f32(i32 55, float %163, float %164, float %165, float %163, float %164, float %165)  ; Dot3(ax,ay,az,bx,by,bz)
  %167 = call float @dx.op.unary.f32(i32 25, float %166)  ; Rsqrt(value)
  %168 = fmul fast float %167, %164
  %169 = fmul fast float %167, %165
  %170 = fsub fast float -0.000000e+00, %115
  %171 = fsub fast float -0.000000e+00, %116
  %172 = fsub fast float -0.000000e+00, %134
  %173 = fsub fast float -0.000000e+00, %135
  %174 = fsub fast float -0.000000e+00, %153
  %175 = fsub fast float -0.000000e+00, %154
  %176 = fmul fast float %110, %114
  %177 = fsub fast float -0.000000e+00, %176
  %178 = call float @dx.op.tertiary.f32(i32 46, float %170, float %111, float %177)  ; FMad(a,b,c)
  %179 = call float @dx.op.tertiary.f32(i32 46, float %171, float %112, float %178)  ; FMad(a,b,c)
  %180 = fmul fast float %110, %133
  %181 = fsub fast float -0.000000e+00, %180
  %182 = call float @dx.op.tertiary.f32(i32 46, float %172, float %111, float %181)  ; FMad(a,b,c)
  %183 = call float @dx.op.tertiary.f32(i32 46, float %173, float %112, float %182)  ; FMad(a,b,c)
  %184 = fmul fast float %110, %152
  %185 = fsub fast float -0.000000e+00, %184
  %186 = call float @dx.op.tertiary.f32(i32 46, float %174, float %111, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %175, float %112, float %186)  ; FMad(a,b,c)
  %188 = fmul fast float %125, %110
  %189 = fmul fast float %188, %129
  %190 = call float @dx.op.tertiary.f32(i32 46, float %130, float %111, float %189)  ; FMad(a,b,c)
  %191 = call float @dx.op.tertiary.f32(i32 46, float %131, float %112, float %190)  ; FMad(a,b,c)
  %192 = fmul fast float %144, %110
  %193 = fmul fast float %192, %148
  %194 = call float @dx.op.tertiary.f32(i32 46, float %149, float %111, float %193)  ; FMad(a,b,c)
  %195 = call float @dx.op.tertiary.f32(i32 46, float %150, float %112, float %194)  ; FMad(a,b,c)
  %196 = fmul fast float %163, %110
  %197 = fmul fast float %196, %167
  %198 = call float @dx.op.tertiary.f32(i32 46, float %168, float %111, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %169, float %112, float %198)  ; FMad(a,b,c)
  %200 = fcmp fast olt float %179, 0.000000e+00
  %201 = fcmp fast olt float %183, 0.000000e+00
  %202 = fcmp fast olt float %187, 0.000000e+00
  %203 = select i1 %200, float 0.000000e+00, float 1.000000e+00
  %204 = select i1 %201, float 0.000000e+00, float 1.000000e+00
  %205 = select i1 %202, float 0.000000e+00, float 1.000000e+00
  %206 = fmul fast float %203, %179
  %207 = fmul fast float %204, %183
  %208 = fmul fast float %205, %187
  %209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %210 = extractvalue %dx.types.CBufRet.f32 %209, 3
  %211 = call float @dx.op.binary.f32(i32 35, float %191, float 0.000000e+00)  ; FMax(a,b)
  %212 = call float @dx.op.binary.f32(i32 35, float %195, float 0.000000e+00)  ; FMax(a,b)
  %213 = call float @dx.op.binary.f32(i32 35, float %199, float 0.000000e+00)  ; FMax(a,b)
  %214 = fmul fast float %211, %203
  %215 = fmul fast float %212, %204
  %216 = fmul fast float %213, %205
  %217 = call float @dx.op.unary.f32(i32 23, float %214)  ; Log(value)
  %218 = call float @dx.op.unary.f32(i32 23, float %215)  ; Log(value)
  %219 = call float @dx.op.unary.f32(i32 23, float %216)  ; Log(value)
  %220 = fmul fast float %217, %210
  %221 = fmul fast float %218, %210
  %222 = fmul fast float %219, %210
  %223 = call float @dx.op.unary.f32(i32 21, float %220)  ; Exp(value)
  %224 = call float @dx.op.unary.f32(i32 21, float %221)  ; Exp(value)
  %225 = call float @dx.op.unary.f32(i32 21, float %222)  ; Exp(value)
  %226 = fmul fast float %223, %179
  %227 = fmul fast float %224, %183
  %228 = fmul fast float %225, %187
  %229 = fmul fast float %206, %118
  %230 = call float @dx.op.tertiary.f32(i32 46, float %207, float %137, float %229)  ; FMad(a,b,c)
  %231 = call float @dx.op.tertiary.f32(i32 46, float %208, float %156, float %230)  ; FMad(a,b,c)
  %232 = fmul fast float %206, %119
  %233 = call float @dx.op.tertiary.f32(i32 46, float %207, float %138, float %232)  ; FMad(a,b,c)
  %234 = call float @dx.op.tertiary.f32(i32 46, float %208, float %157, float %233)  ; FMad(a,b,c)
  %235 = fmul fast float %206, %120
  %236 = call float @dx.op.tertiary.f32(i32 46, float %207, float %139, float %235)  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %208, float %158, float %236)  ; FMad(a,b,c)
  %238 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %239 = extractvalue %dx.types.CBufRet.f32 %238, 0
  %240 = extractvalue %dx.types.CBufRet.f32 %238, 1
  %241 = extractvalue %dx.types.CBufRet.f32 %238, 2
  %242 = fmul fast float %239, %231
  %243 = fmul fast float %240, %234
  %244 = fmul fast float %241, %237
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %245, 2
  %249 = fadd fast float %242, %246
  %250 = fadd fast float %243, %247
  %251 = fadd fast float %244, %248
  %252 = fmul fast float %226, %122
  %253 = call float @dx.op.tertiary.f32(i32 46, float %227, float %141, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %228, float %160, float %253)  ; FMad(a,b,c)
  %255 = fmul fast float %226, %123
  %256 = call float @dx.op.tertiary.f32(i32 46, float %227, float %142, float %255)  ; FMad(a,b,c)
  %257 = call float @dx.op.tertiary.f32(i32 46, float %228, float %161, float %256)  ; FMad(a,b,c)
  %258 = fmul fast float %226, %124
  %259 = call float @dx.op.tertiary.f32(i32 46, float %227, float %143, float %258)  ; FMad(a,b,c)
  %260 = call float @dx.op.tertiary.f32(i32 46, float %228, float %162, float %259)  ; FMad(a,b,c)
  %261 = extractvalue %dx.types.CBufRet.f32 %209, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %209, 1
  %263 = extractvalue %dx.types.CBufRet.f32 %209, 2
  %264 = fmul fast float %261, %254
  %265 = fmul fast float %262, %257
  %266 = fmul fast float %263, %260
  %267 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %3, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %268 = extractvalue %dx.types.ResRet.f32 %267, 0
  %269 = extractvalue %dx.types.ResRet.f32 %267, 1
  %270 = extractvalue %dx.types.ResRet.f32 %267, 2
  %271 = extractvalue %dx.types.ResRet.f32 %267, 3
  %272 = fmul fast float %271, %8
  %273 = fmul fast float %249, %5
  %274 = fmul fast float %273, %268
  %275 = fmul fast float %250, %6
  %276 = fmul fast float %275, %269
  %277 = fmul fast float %251, %7
  %278 = fmul fast float %277, %270
  %279 = fmul fast float %264, %272
  %280 = fmul fast float %265, %272
  %281 = fmul fast float %266, %272
  %282 = fadd fast float %274, %279
  %283 = fadd fast float %276, %280
  %284 = fadd fast float %278, %281
  %285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.f32 %285, 0
  %287 = extractvalue %dx.types.CBufRet.f32 %285, 1
  %288 = extractvalue %dx.types.CBufRet.f32 %285, 2
  %289 = fmul fast float %286, %272
  %290 = fmul fast float %287, %272
  %291 = fmul fast float %288, %272
  %292 = fsub fast float %289, %282
  %293 = fsub fast float %290, %283
  %294 = fsub fast float %291, %284
  %295 = fmul fast float %292, %15
  %296 = fmul fast float %293, %15
  %297 = fmul fast float %294, %15
  %298 = fadd fast float %295, %282
  %299 = fadd fast float %296, %283
  %300 = fadd fast float %297, %284
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %298)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %299)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %300)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %272)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !9, !11}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{!10}
!10 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!11 = !{!12}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!14 = !{void ()* @PSNormalPixelLightingTxNoSpec, !"PSNormalPixelLightingTxNoSpec", !15, !4, null}
!15 = !{!16, !27, null}
!16 = !{!17, !20, !23, !26}
!17 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 2, i32 0, i8 0, !19}
!18 = !{i32 0}
!19 = !{i32 3, i32 3}
!20 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!21 = !{i32 1}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 3, i32 2, i8 0, !25}
!24 = !{i32 2}
!25 = !{i32 3, i32 7}
!26 = !{i32 3, !"COLOR", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!27 = !{!28}
!28 = !{i32 0, !"SV_Target", i8 9, i8 16, !18, i8 0, i32 1, i8 4, i32 0, i8 0, !22}

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTxNoSpec[] = {
  0x44, 0x58, 0x42, 0x43, 0x0a, 0x82, 0xb3, 0x0f, 0xce, 0x13, 0x56, 0x1f,
  0x55, 0x96, 0x09, 0x94, 0x47, 0x43, 0xa8, 0xe1, 0x01, 0x00, 0x00, 0x00,
  0xa3, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0x7f, 0x02, 0x00, 0x00, 0x3b, 0x03, 0x00, 0x00, 0x83, 0x03, 0x00, 0x00,
  0x9f, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67,
  0x65, 0x74, 0x00, 0x50, 0x53, 0x56, 0x30, 0x3c, 0x01, 0x00, 0x00, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xb4, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49,
  0x4c, 0x44, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x4e, 0x6f, 0x72, 0x6d,
  0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
  0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78, 0x65,
  0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x4e,
  0x6f, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x48,
  0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37,
  0x32, 0x39, 0x7d, 0xe4, 0x10, 0x0d, 0xb0, 0xa6, 0xf5, 0x5d, 0x56, 0xc9,
  0x9c, 0xf6, 0x38, 0x44, 0x58, 0x49, 0x4c, 0xfc, 0x10, 0x00, 0x00, 0x60,
  0x00, 0x00, 0x00, 0x3f, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00,
  0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xe4, 0x10, 0x00, 0x00, 0x42,
  0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x36, 0x04, 0x00, 0x00, 0x0b,
  0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07,
  0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92,
  0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80,
  0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38,
  0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43,
  0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11,
  0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04,
  0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b,
  0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84,
  0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x32,
  0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04,
  0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b,
  0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44,
  0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa8, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x9f, 0xdb, 0xa8, 0x62, 0x25, 0x26, 0xbf,
  0xb8, 0x6d, 0x44, 0x0c, 0xc3, 0x30, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13,
  0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a, 0xa1,
  0x10, 0x0c, 0x41, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8,
  0x29, 0xc3, 0x40, 0x0c, 0x14, 0xdd, 0x34, 0x5c, 0xfe, 0x84, 0x3d, 0x84,
  0xe4, 0xaf, 0x84, 0xb4, 0x12, 0x93, 0x5f, 0xdc, 0x36, 0x2a, 0x86, 0x61,
  0x18, 0x88, 0xc2, 0x4c, 0x04, 0xc3, 0x0c, 0xc3, 0x30, 0x10, 0x04, 0x31,
  0x10, 0x55, 0x8c, 0x81, 0x18, 0x86, 0x61, 0x20, 0xab, 0x10, 0x03, 0x31,
  0x0c, 0x84, 0x95, 0x62, 0x20, 0x86, 0x61, 0x20, 0x6d, 0x8e, 0x20, 0x28,
  0x06, 0x43, 0x14, 0x04, 0xc1, 0x51, 0x37, 0x10, 0x30, 0x8c, 0x40, 0x0c,
  0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01,
  0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01,
  0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03,
  0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01,
  0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03,
  0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80,
  0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d,
  0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e,
  0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e,
  0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c,
  0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x00, 0x86, 0x24, 0x0e, 0x23,
  0x0c, 0xc3, 0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f,
  0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e,
  0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e,
  0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06,
  0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0xa0, 0x07, 0x7a, 0xd0, 0x0e,
  0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e,
  0x28, 0x20, 0x66, 0x12, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79,
  0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72,
  0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77,
  0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36,
  0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x24, 0x90, 0x25, 0x99,
  0x39, 0x40, 0x26, 0x01, 0x78, 0xde, 0x70, 0xf9, 0xc0, 0x82, 0x18, 0x0d,
  0x43, 0x34, 0x93, 0xbf, 0x10, 0x06, 0x20, 0x60, 0x7e, 0x0a, 0x44, 0x00,
  0x43, 0x4c, 0x44, 0x24, 0xa1, 0x06, 0x24, 0xc9, 0x01, 0x45, 0x51, 0x92,
  0x04, 0x53, 0x34, 0x25, 0xf5, 0x26, 0x69, 0x8a, 0x28, 0x61, 0xf2, 0x59,
  0x80, 0x79, 0x16, 0x22, 0x62, 0x27, 0x60, 0x22, 0x50, 0x40, 0x10, 0x9b,
  0x12, 0x04, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36,
  0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e,
  0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07,
  0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07,
  0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c,
  0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x79, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0xf2, 0x34, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0xe4, 0x79, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0xc8, 0x13, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x05, 0x04, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x0c, 0x08, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x3a, 0x20,
  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01,
  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19,
  0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a,
  0x60, 0x04, 0xa0, 0x14, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x80, 0x0d, 0xca,
  0xa0, 0x3c, 0xca, 0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28,
  0x83, 0x02, 0xa1, 0x71, 0x06, 0x80, 0xce, 0x19, 0x00, 0x5a, 0x67, 0x00,
  0xa8, 0x9d, 0x01, 0x20, 0x77, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00, 0x8e,
  0xe3, 0x38, 0x8e, 0xe3, 0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00, 0x79,
  0x18, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46,
  0x02, 0x13, 0xc4, 0x83, 0x0c, 0x6f, 0x0c, 0x24, 0xc6, 0x45, 0x66, 0x43,
  0x10, 0x4c, 0x10, 0x88, 0x65, 0x82, 0x40, 0x30, 0x1b, 0x84, 0x81, 0x98,
  0x20, 0x10, 0xcd, 0x06, 0x61, 0x30, 0x28, 0xc0, 0xcd, 0x4d, 0x10, 0x08,
  0x67, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x61, 0x0c, 0x36, 0x02, 0x13, 0x04,
  0xe2, 0x99, 0x20, 0x10, 0xd0, 0x06, 0x81, 0x70, 0x36, 0x24, 0xc4, 0xc2,
  0x10, 0xc4, 0xd0, 0x10, 0xcf, 0x04, 0xe1, 0x0c, 0xb8, 0x0d, 0xc9, 0x10,
  0x31, 0xc4, 0x30, 0x34, 0xc4, 0xb3, 0x41, 0x80, 0xa4, 0x09, 0xc2, 0x1a,
  0x74, 0x13, 0x04, 0x22, 0xda, 0x80, 0x10, 0x14, 0x43, 0x10, 0x43, 0x05,
  0x6c, 0x08, 0xac, 0x09, 0x42, 0x1b, 0x78, 0x1b, 0x10, 0x02, 0x63, 0x08,
  0x62, 0x20, 0x80, 0x0d, 0x41, 0xb6, 0x81, 0x98, 0x80, 0x4b, 0x9b, 0x20,
  0xb8, 0xc1, 0xb7, 0x21, 0xe0, 0x26, 0x08, 0x02, 0xc0, 0x0e, 0x6a, 0xca,
  0xe9, 0x4d, 0xae, 0x2d, 0x8c, 0x0d, 0x2a, 0x0d, 0xaf, 0x8c, 0x8d, 0x29,
  0xed, 0x0c, 0x8d, 0x2e, 0xcd, 0xed, 0x8c, 0x0a, 0xcf, 0xe9, 0x6d, 0x0a,
  0xae, 0x6c, 0x8c, 0x08, 0x55, 0x11, 0xd6, 0xd0, 0xd3, 0x93, 0x14, 0xd1,
  0x04, 0xa1, 0xa8, 0x26, 0x08, 0x85, 0xb5, 0x21, 0x20, 0x26, 0x08, 0xc5,
  0x35, 0x41, 0x20, 0xa4, 0x0d, 0x42, 0x19, 0x94, 0xc1, 0x86, 0x85, 0x00,
  0x83, 0x30, 0x10, 0x83, 0x31, 0x20, 0x83, 0x81, 0x0c, 0x08, 0x31, 0x30,
  0x83, 0x0d, 0xc1, 0x30, 0x41, 0x28, 0xb0, 0x09, 0x02, 0x31, 0x6d, 0x10,
  0xca, 0x40, 0x0d, 0x36, 0x2c, 0x03, 0x18, 0x84, 0x81, 0x18, 0xa0, 0x01,
  0x19, 0x0c, 0x69, 0x30, 0x88, 0xc1, 0x1a, 0x6c, 0x08, 0x9a, 0x09, 0x42,
  0x91, 0x4d, 0x10, 0x08, 0x6a, 0x83, 0x50, 0x06, 0x6f, 0xb0, 0x61, 0x69,
  0xc0, 0x20, 0x0c, 0xc4, 0xa0, 0x0d, 0xc8, 0x60, 0x70, 0x83, 0x46, 0x0c,
  0xe0, 0x80, 0xc5, 0xd0, 0x13, 0xd3, 0x93, 0xd4, 0x86, 0xa5, 0x0c, 0xe4,
  0x20, 0x0c, 0xc4, 0x60, 0x0c, 0xc8, 0x60, 0x48, 0x83, 0x32, 0x10, 0x83,
  0x35, 0xd8, 0x40, 0x9c, 0x01, 0x1b, 0xc4, 0xc1, 0x1c, 0x30, 0x99, 0xb2,
  0xfa, 0xa2, 0x0a, 0x93, 0x3b, 0x2b, 0xa3, 0x9b, 0x20, 0x14, 0xda, 0x86,
  0x85, 0xa8, 0x83, 0x30, 0xb0, 0x83, 0x31, 0x10, 0x83, 0x21, 0x0d, 0x08,
  0x31, 0x58, 0x83, 0x0d, 0xc1, 0x1d, 0x6c, 0x18, 0xe8, 0x00, 0x0f, 0x80,
  0x0d, 0x85, 0xf7, 0xe5, 0xc1, 0x06, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73,
  0x49, 0x23, 0x2b, 0x73, 0xa3, 0x9b, 0x12, 0x04, 0x55, 0xc8, 0xf0, 0x5c,
  0xec, 0xca, 0xe4, 0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x44, 0x13, 0x32,
  0x3c, 0x17, 0xbb, 0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29, 0x81, 0x51, 0x87,
  0x0c, 0xcf, 0x65, 0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac,
  0x8c, 0x6d, 0x4a, 0x90, 0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b,
  0xab, 0x93, 0x1b, 0x2b, 0x9b, 0x9b, 0x12, 0x68, 0x75, 0xc8, 0xf0, 0x5c,
  0xec, 0xd2, 0xca, 0xee, 0x92, 0xc8, 0xa6, 0xe8, 0xc2, 0xe8, 0xca, 0xa6,
  0x04, 0x5c, 0x1d, 0x32, 0x3c, 0x97, 0x32, 0x37, 0x3a, 0xb9, 0x3c, 0xa8,
  0xb7, 0x34, 0x37, 0xba, 0xb9, 0x29, 0x41, 0x1e, 0x00, 0x00, 0x00, 0x79,
  0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4,
  0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c,
  0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00,
  0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2,
  0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38,
  0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d,
  0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87,
  0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87,
  0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30,
  0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde,
  0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b,
  0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c,
  0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07,
  0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87,
  0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87,
  0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87,
  0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0,
  0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc,
  0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4,
  0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39,
  0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38,
  0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b,
  0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc5, 0x61, 0x07, 0x76, 0xb0, 0x87,
  0x76, 0x70, 0x03, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x19, 0xd9, 0x43,
  0x0e, 0xf8, 0xe0, 0x06, 0xe8, 0xc0, 0x0e, 0x6e, 0x20, 0x0f, 0xe5, 0x30,
  0x0f, 0xef, 0x50, 0x0f, 0xf2, 0x30, 0x0e, 0xe5, 0xe0, 0x06, 0xe1, 0x40,
  0x0f, 0xf4, 0x20, 0x0f, 0xe9, 0x20, 0x0e, 0xf5, 0x40, 0x0f, 0xe5, 0x00,
  0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x06,
  0xd0, 0xa5, 0xec, 0xe9, 0x44, 0x0c, 0xb0, 0xa4, 0xc8, 0x45, 0x2c, 0x25,
  0x62, 0x1c, 0x13, 0xd2, 0x18, 0xed, 0x75, 0x3a, 0xec, 0x43, 0x08, 0x86,
  0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5,
  0x6d, 0xdb, 0xc0, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05,
  0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6,
  0x29, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21,
  0xd0, 0x0c, 0x0b, 0x61, 0x07, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce,
  0x64, 0xfb, 0xc5, 0x6d, 0x1b, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83,
  0x33, 0xdd, 0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x06, 0xd0,
  0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x00, 0xf3, 0x2c, 0x84, 0x5f, 0xdc, 0xb6,
  0x09, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4,
  0xf4, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05, 0xcf,
  0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00,
  0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x13,
  0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xc4,
  0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94, 0x46, 0x59, 0x14, 0x44, 0x51,
  0x14, 0xd7, 0x0c, 0x40, 0x21, 0x94, 0x5d, 0xb9, 0x95, 0x4c, 0x99, 0x06,
  0x14, 0x6a, 0x40, 0xc9, 0x95, 0x51, 0xb9, 0x94, 0x4a, 0xe1, 0x15, 0x46,
  0xb1, 0x15, 0x0c, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c,
  0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88,
  0x7f, 0x33, 0x00, 0x23, 0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28,
  0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0xc9, 0x81,
  0x63, 0x06, 0x71, 0x10, 0x07, 0xdc, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x74, 0x73, 0xf0, 0x9c, 0x41, 0x1c, 0xc4, 0x41, 0x37, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x1d, 0x1d, 0x40, 0x65, 0x20, 0x07, 0x72, 0xe0, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x57, 0x07, 0x11, 0x1a, 0xcc, 0xc1,
  0x1c, 0x7c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0x01, 0xe6,
  0x06, 0x74, 0xa0, 0x06, 0xd9, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0xa0, 0x90, 0xbd, 0x41, 0x1d, 0x80, 0x81, 0x36, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x46, 0x28, 0x68, 0x70, 0x60, 0x07, 0x6b, 0xb0, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0a, 0x5b, 0x1c, 0xdc, 0x81, 0x1a,
  0x70, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x8c, 0x02, 0x57, 0x07,
  0x78, 0xe0, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa4,
  0xd0, 0xd9, 0x41, 0x1e, 0x90, 0x81, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x46, 0x29, 0x78, 0x77, 0xa0, 0x07, 0x6f, 0xf0, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x61, 0x0a, 0x1f, 0x1f, 0xec, 0x41, 0x1c, 0x80,
  0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa7, 0x00, 0x06, 0x7d,
  0xc0, 0x07, 0x67, 0x10, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60,
  0xa0, 0x42, 0x18, 0xf8, 0x41, 0x1f, 0xc8, 0x81, 0x18, 0x8c, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x91, 0x0a, 0x62, 0xf0, 0x07, 0x7e, 0x10, 0x07,
  0x63, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x2a, 0x8c, 0xc1,
  0x1f, 0xfc, 0x41, 0x1d, 0x90, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0xab, 0x40, 0x06, 0xa0, 0x00, 0x0a, 0x6b, 0x50, 0x06, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0xd0, 0xa8, 0x02, 0x19, 0x38, 0xda, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0xa0, 0xc4, 0xc7,
  0x06, 0x25, 0x3e, 0x36, 0x28, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04,
  0x83, 0x07, 0x16, 0xd4, 0x60, 0x10, 0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c,
  0x00, 0x04, 0xc1, 0x20, 0x82, 0x05, 0x35, 0x08, 0xac, 0x08, 0xe4, 0x63,
  0x85, 0x20, 0x1f, 0x2b, 0x06, 0xf9, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82,
  0x01, 0x35, 0x0b, 0x67, 0xd0, 0x6d, 0x4e, 0x03, 0x06, 0x60, 0xd0, 0x0a,
  0xad, 0x20, 0x07, 0x60, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x60,
  0x42, 0x19, 0xc8, 0xc7, 0x04, 0x33, 0x90, 0x8f, 0x09, 0x68, 0x00, 0x1f,
  0x13, 0xd2, 0x00, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe5,
  0x02, 0x1b, 0x08, 0x81, 0x10, 0x58, 0x1a, 0x04, 0xf1, 0x19, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x83, 0xa8, 0x17, 0xda, 0x20, 0x18, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x83, 0xc8, 0x17, 0xee, 0x80, 0x1b, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x83, 0xe8, 0x17, 0xf0, 0x80, 0x1b, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x83, 0x08, 0x1c, 0xf2, 0x80, 0x1b, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83,
  0x28, 0x1c, 0xf2, 0xe0, 0x1b, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x48,
  0x1c, 0xf4, 0xe0, 0x1b, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x68, 0x1c,
  0xf6, 0xe0, 0x1b, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x88, 0x1c, 0xfa,
  0xc0, 0x1b, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xa8, 0x1c, 0xfc, 0xc0,
  0x1b, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xc8, 0x1c, 0xfc, 0x00, 0x0c,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x3a, 0x87, 0x3f, 0x00, 0x03,
  0x2b, 0x12, 0xf9, 0xd8, 0x91, 0xc8, 0xc7, 0x84, 0x20, 0x3e, 0xa6, 0x2c,
  0xf2, 0xb1, 0xc4, 0x91, 0x8f, 0x09, 0x41, 0x7c, 0x8c, 0x81, 0xe4, 0x63,
  0x0e, 0x24, 0x1f, 0x13, 0x82, 0xf8, 0x58, 0xf0, 0xc8, 0xc7, 0x8a, 0x47,
  0x3e, 0x26, 0x04, 0xf1, 0x31, 0x25, 0x92, 0x8f, 0x15, 0x94, 0x7c, 0x4c,
  0x08, 0xe2, 0x63, 0x8a, 0x25, 0x1f, 0x73, 0x2c, 0xf9, 0x98, 0x10, 0xc4,
  0xc7, 0x1a, 0x4d, 0x3e, 0xb6, 0x70, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x35,
  0x9f, 0x7c, 0x8c, 0xf2, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0xb3, 0xc2, 0x40,
  0x3e, 0x46, 0x8d, 0x81, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xd0, 0x27, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0x40, 0x62, 0x1c, 0x3c, 0x24,
  0xb0, 0x27, 0x0c, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9a,
  0x48, 0x94, 0x03, 0x18, 0x1c, 0x81, 0x39, 0x63, 0x20, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xd0, 0x48, 0xe2, 0x1c, 0xc4, 0xc0, 0x08, 0x46,
  0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0x51, 0x09, 0x72, 0x28, 0x86, 0xa0,
  0x18, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0x54, 0x82, 0x1c,
  0x02, 0xc3, 0xcc, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0,
  0xa1, 0xc4, 0x3a, 0x94, 0x01, 0x14, 0xd8, 0x85, 0x06, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x03, 0x4d, 0x25, 0xda, 0xe1, 0x0c, 0x9e, 0xc0,
  0x2c, 0x35, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x2c,
  0xf1, 0x0e, 0x69, 0xe0, 0x04, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xf0,
  0xc8, 0x04, 0x3b, 0x14, 0x43, 0x50, 0x0c, 0xc1, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x44, 0x32, 0xc1, 0x0e, 0x81, 0x05, 0x87, 0x7c, 0x4c, 0x30,
  0xe4, 0x63, 0x43, 0x21, 0x1f, 0x93, 0xfa, 0x40, 0x3e, 0x16, 0x34, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x8d, 0x26, 0xee, 0xc1, 0x0f,
  0x8a, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0x9a, 0xc0, 0x07,
  0x3e, 0xd0, 0x85, 0xc0, 0xa8, 0x50, 0x90, 0x8f, 0x05, 0x91, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0xc3, 0x89, 0x7d, 0x10, 0x05, 0x24,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x2d, 0x27, 0xf8, 0x01, 0x14,
  0x7a, 0x21, 0x30, 0xab, 0x14, 0xe4, 0x63, 0x41, 0x25, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xd0, 0x78, 0xe2, 0x1f, 0x4c, 0x61, 0x09, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0xeb, 0x09, 0x90, 0x20, 0x05, 0x70,
  0x08, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0x19, 0x8b, 0x7e, 0x48,
  0x8a, 0x20, 0x29, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0xc6,
  0xa2, 0x1f, 0x02, 0x0b, 0x16, 0xf9, 0x98, 0x80, 0xc8, 0xc7, 0x86, 0x42,
  0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xd0, 0xa4, 0xc5, 0x48, 0xb4,
  0x83, 0x4e, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x34, 0x6d, 0x71, 0x12, 0xf1,
  0x20, 0x16, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x4d, 0x5c, 0xac, 0x44, 0x3d,
  0x90, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0x98, 0x38, 0x2c, 0xf1, 0x31, 0x71, 0x58, 0xe2, 0x63, 0xe2, 0xb0, 0xc4,
  0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x9e, 0xbb, 0x88, 0x89, 0x41,
  0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xe8, 0x2e,
  0x62, 0x22, 0xb0, 0x80, 0x90, 0x8f, 0x09, 0x84, 0x7c, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xa0, 0xe1, 0x0b, 0x9b, 0x00, 0x89, 0x9b, 0x18, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0x68, 0x40, 0x43, 0x27, 0x48, 0xe2, 0x2d, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0x1a, 0xd2, 0xf0, 0x09, 0x94, 0x10, 0x8b, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x7a, 0x58, 0xe2,
  0x63, 0xf5, 0xb0, 0xc4, 0xc7, 0xea, 0x61, 0x89, 0xcf, 0x88, 0xc1, 0x02,
  0x80, 0x20, 0x18, 0x3c, 0xaa, 0x41, 0x16, 0x83, 0x10, 0x0c, 0x42, 0x30,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x91, 0x6a, 0x90, 0x45, 0x60, 0x01,
  0x21, 0x1f, 0x13, 0x08, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41,
  0xf3, 0x1a, 0x69, 0x31, 0x13, 0xa5, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xd0,
  0xcc, 0x46, 0x5b, 0xdc, 0x84, 0x5c, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x34,
  0xb7, 0x11, 0x17, 0x3b, 0x71, 0x17, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x60, 0x28, 0xb1, 0xc4, 0xc7, 0x50, 0x62, 0x89,
  0x8f, 0xa1, 0xc4, 0x12, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x78,
  0x7a, 0xe3, 0x2e, 0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0xa2, 0xde, 0xb8, 0x8b, 0xc0, 0x02, 0x42, 0x3e, 0x26, 0x10,
  0xf2, 0x31, 0xb5, 0xb8, 0x83, 0xf8, 0xd8, 0x5a, 0xdc, 0x41, 0x7c, 0x8c,
  0x2d, 0xcc, 0x20, 0x3e, 0xd6, 0x16, 0x66, 0x10, 0x1f, 0x73, 0x8b, 0x2a,
  0x3e, 0xf6, 0x16, 0x55, 0x7c, 0x4c, 0x14, 0xfc, 0x40, 0x3e, 0x16, 0x17,
  0x41, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0x23, 0x8f, 0xd3,
  0x40, 0x46, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0xad, 0x3c,
  0x50, 0x03, 0x19, 0x85, 0xc0, 0x4c, 0xe1, 0x0d, 0xe4, 0x63, 0x75, 0x11,
  0xc4, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x34, 0xf4, 0x58, 0x0d,
  0xe5, 0x14, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xd2, 0x83,
  0x35, 0x94, 0x53, 0x08, 0x4c, 0x15, 0xc0, 0x40, 0x3e, 0x96, 0x17, 0x41,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0x63, 0x8f, 0xd7, 0x60,
  0x56, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0xad, 0x3d, 0x60,
  0x83, 0x59, 0x85, 0xc0, 0xfe, 0xc0, 0x15, 0xe4, 0x63, 0x01, 0x1f, 0xc8,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x34, 0xf8, 0x98, 0x0d, 0x3e,
  0x78, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0xf8, 0xa0,
  0x0d, 0x3e, 0x78, 0x85, 0xc0, 0xe0, 0x40, 0x16, 0xe4, 0x63, 0x41, 0x1b,
  0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x34, 0xfa, 0xb8, 0x8d,
  0x36, 0x98, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0xfa,
  0xc0, 0x8d, 0x36, 0x98, 0x85, 0xc0, 0xc2, 0xc0, 0x16, 0xe4, 0x63, 0x81,
  0x27, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xf0, 0x63, 0x37,
  0xbc, 0x5b, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0xcb, 0x0f,
  0xde, 0xf0, 0x6e, 0x21, 0x18, 0x8e, 0xa8, 0x52, 0x83, 0xf8, 0x86, 0x23,
  0x24, 0xd5, 0x20, 0xbe, 0xe1, 0x88, 0x67, 0x35, 0x88, 0x6f, 0xba, 0x81,
  0x35, 0x5c, 0x63, 0x98, 0x6e, 0x68, 0x8d, 0xd7, 0x18, 0xa6, 0x1b, 0x5c,
  0x03, 0x36, 0x06, 0x1b, 0x36, 0xf9, 0xd8, 0x80, 0xc9, 0xc7, 0x86, 0x4a,
  0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xd0, 0xa4, 0xc8, 0x78, 0xb4,
  0x46, 0x7f, 0x8c, 0x26, 0x04, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x60, 0x26, 0xf2, 0x1b, 0x14, 0x6d, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x01, 0x76, 0x22, 0xe0, 0x11, 0xd5, 0xc6, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x60, 0x28, 0x12, 0x1e, 0x8e, 0x6d, 0xd8, 0xb0, 0xc8, 0xc7, 0x86,
  0x45, 0x3e, 0x36, 0x2c, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83,
  0xe8, 0x45, 0xc8, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x08,
  0x46, 0xca, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x28, 0x46,
  0xcc, 0x63, 0xb0, 0x41, 0x91, 0x8f, 0x0d, 0x8b, 0x7c, 0x6c, 0x60, 0xe4,
  0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x51, 0x8d, 0xa4, 0xc7, 0x30,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x91, 0x8d, 0xa8, 0xc7, 0x30, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0xd1, 0x8d, 0xac, 0xc7, 0x60, 0xc3, 0x1b,
  0xc8, 0xc7, 0x06, 0x36, 0x90, 0x8f, 0x0d, 0x69, 0x20, 0x1f, 0xbb, 0xde,
  0x41, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xe1, 0xc8, 0x7e,
  0x5c, 0xbd, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x96, 0x23,
  0xfc, 0x71, 0xad, 0x42, 0x60, 0x5a, 0x3c, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xb4, 0x1d, 0xf1, 0x0f, 0xed, 0x17, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xd0, 0x78, 0xe4, 0x3f, 0xb4, 0x56, 0x08, 0xac,
  0x9b, 0x07, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xe6, 0x23,
  0x21, 0xd2, 0x85, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xda,
  0x8f, 0x88, 0x48, 0xf7, 0x0a, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x34, 0x66, 0x02, 0x22, 0xea, 0xd1, 0x23, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc3, 0x22, 0x1f, 0x1b, 0x12, 0xf9,
  0xd8, 0x70, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x9a, 0x36,
  0x39, 0x91, 0xf8, 0x28, 0x93, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0xd1, 0x84, 0x41, 0xb0, 0x63, 0x80, 0x8f, 0x1d, 0x03, 0x7c, 0xec, 0x18,
  0xe0, 0x63, 0x9a, 0x48, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xb4, 0x37, 0x91, 0x11, 0x0d, 0x1e, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xd0, 0xe0, 0x64, 0x46, 0x34, 0x5f, 0x08, 0xac, 0x23, 0x09, 0xf9,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x26, 0x27, 0x35, 0xd2, 0xc9,
  0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xda, 0x9c, 0xd8, 0x48,
  0x07, 0x0e, 0x81, 0x81, 0x81, 0x49, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xb4, 0x3a, 0xc1, 0x11, 0x30, 0xa0, 0x87, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x34, 0x3b, 0xc9, 0x11, 0x30, 0x10, 0x87, 0x60,
  0x34, 0x81, 0x0e, 0x80, 0xd1, 0x84, 0x3a, 0x08, 0x46, 0x13, 0xec, 0x40,
  0xb0, 0x41, 0x91, 0x8f, 0x0d, 0x88, 0x7c, 0x6c, 0x30, 0xe4, 0x33, 0x62,
  0xf0, 0x00, 0x20, 0x08, 0x06, 0x14, 0xa8, 0xd0, 0x48, 0x8a, 0xa0, 0xc8,
  0x7e, 0xe8, 0x47, 0x8b, 0xb4, 0x88, 0x9e, 0xe8, 0xc9, 0x8f, 0xb4, 0xc8,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26,
  0x10, 0x83, 0x05, 0x28, 0x22, 0x1f, 0xc3, 0x58, 0x44, 0x3e, 0x16, 0x18,
  0xf2, 0xb1, 0xac, 0x45, 0xe4, 0x63, 0xc1, 0x21, 0x1f, 0xd3, 0x5c, 0x44,
  0x3e, 0x16, 0x20, 0xf2, 0xb1, 0xe7, 0x90, 0x8f, 0x3d, 0x88, 0x7c, 0xec,
  0x49, 0xe4, 0x63, 0xc8, 0x00, 0x1f, 0x3b, 0x06, 0xf8, 0x98, 0x31, 0xc0,
  0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x9a, 0x5a, 0x79, 0x93, 0x1c,
  0xb1, 0x93, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0xb0, 0x21, 0x92, 0x8f, 0x0d, 0x92, 0x7c, 0x6c, 0x98, 0xe4, 0x63, 0x83,
  0x12, 0x1f, 0x1b, 0x94, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x06, 0x1c, 0x91,
  0x8f, 0x0d, 0x39, 0x22, 0x1f, 0x1b, 0x74, 0x44, 0x3e, 0x36, 0x40, 0xf0,
  0xb1, 0x01, 0x82, 0x8f, 0x0d, 0x10, 0x7c, 0x46, 0x0c, 0x12, 0x00, 0x04,
  0xc1, 0x00, 0x31, 0x97, 0x5d, 0xe1, 0x15, 0x5e, 0x91, 0x95, 0x61, 0xc4,
  0x20, 0x01, 0x40, 0x10, 0x0c, 0x10, 0x73, 0xd9, 0x15, 0x5e, 0xe1, 0x95,
  0x53, 0x11, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x31, 0x97, 0x5d,
  0xe1, 0x15, 0x5e, 0x89, 0x95, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x10, 0x73, 0xd9, 0x15, 0x5e, 0xe1, 0x95, 0x57, 0xe9, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00
};
