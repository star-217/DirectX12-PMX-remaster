#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\NormalMapEffect_PSNormalPixelLightingTxNoFogSpec.pdb
; shader hash: 9926c0f5dbf96ded1399892e22809441
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTxNoFogSpec() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 0
  %19 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %20 = extractvalue %dx.types.CBufRet.f32 %17, 2
  %21 = fsub fast float %18, %12
  %22 = fsub fast float %19, %13
  %23 = fsub fast float %20, %14
  %24 = call float @dx.op.dot3.f32(i32 55, float %21, float %22, float %23, float %21, float %22, float %23)  ; Dot3(ax,ay,az,bx,by,bz)
  %25 = call float @dx.op.unary.f32(i32 25, float %24)  ; Rsqrt(value)
  %26 = fmul fast float %21, %25
  %27 = fmul fast float %22, %25
  %28 = fmul fast float %23, %25
  %29 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %30 = extractvalue %dx.types.ResRet.f32 %29, 0
  %31 = extractvalue %dx.types.ResRet.f32 %29, 1
  %32 = fmul fast float %30, 2.000000e+00
  %33 = fmul fast float %31, 2.000000e+00
  %34 = fadd fast float %32, -1.000000e+00
  %35 = fadd fast float %33, -1.000000e+00
  %36 = call float @dx.op.dot2.f32(i32 54, float %34, float %35, float %34, float %35)  ; Dot2(ax,ay,bx,by)
  %37 = fsub fast float 1.000000e+00, %36
  %38 = call float @dx.op.unary.f32(i32 24, float %37)  ; Sqrt(value)
  %39 = call float @dx.op.unary.f32(i32 83, float %12)  ; DerivCoarseX(value)
  %40 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %41 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %42 = call float @dx.op.unary.f32(i32 84, float %12)  ; DerivCoarseY(value)
  %43 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %44 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %45 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %46 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %47 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %48 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %49 = fmul fast float %44, %40
  %50 = fmul fast float %43, %41
  %51 = fsub fast float %49, %50
  %52 = fmul fast float %42, %41
  %53 = fmul fast float %44, %39
  %54 = fsub fast float %52, %53
  %55 = fmul fast float %43, %39
  %56 = fmul fast float %42, %40
  %57 = fsub fast float %55, %56
  %58 = fmul fast float %57, %43
  %59 = fmul fast float %54, %44
  %60 = fsub fast float %58, %59
  %61 = fmul fast float %51, %44
  %62 = fmul fast float %57, %42
  %63 = fsub fast float %61, %62
  %64 = fmul fast float %54, %42
  %65 = fmul fast float %51, %43
  %66 = fsub fast float %64, %65
  %67 = fmul fast float %54, %41
  %68 = fmul fast float %57, %40
  %69 = fsub fast float %67, %68
  %70 = fmul fast float %57, %39
  %71 = fmul fast float %51, %41
  %72 = fsub fast float %70, %71
  %73 = fmul fast float %51, %40
  %74 = fmul fast float %54, %39
  %75 = fsub fast float %73, %74
  %76 = fmul fast float %60, %45
  %77 = call float @dx.op.tertiary.f32(i32 46, float %47, float %69, float %76)  ; FMad(a,b,c)
  %78 = fmul fast float %63, %45
  %79 = call float @dx.op.tertiary.f32(i32 46, float %47, float %72, float %78)  ; FMad(a,b,c)
  %80 = fmul fast float %66, %45
  %81 = call float @dx.op.tertiary.f32(i32 46, float %47, float %75, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.dot3.f32(i32 55, float %77, float %79, float %81, float %77, float %79, float %81)  ; Dot3(ax,ay,az,bx,by,bz)
  %83 = call float @dx.op.unary.f32(i32 25, float %82)  ; Rsqrt(value)
  %84 = fmul fast float %60, %46
  %85 = call float @dx.op.tertiary.f32(i32 46, float %48, float %69, float %84)  ; FMad(a,b,c)
  %86 = fmul fast float %63, %46
  %87 = call float @dx.op.tertiary.f32(i32 46, float %48, float %72, float %86)  ; FMad(a,b,c)
  %88 = fmul fast float %66, %46
  %89 = call float @dx.op.tertiary.f32(i32 46, float %48, float %75, float %88)  ; FMad(a,b,c)
  %90 = call float @dx.op.dot3.f32(i32 55, float %85, float %87, float %89, float %85, float %87, float %89)  ; Dot3(ax,ay,az,bx,by,bz)
  %91 = call float @dx.op.unary.f32(i32 25, float %90)  ; Rsqrt(value)
  %92 = fmul fast float %91, %85
  %93 = fmul fast float %91, %87
  %94 = fmul fast float %91, %89
  %95 = fmul fast float %77, %34
  %96 = fmul fast float %95, %83
  %97 = call float @dx.op.tertiary.f32(i32 46, float %35, float %92, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %38, float %9, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %79, %34
  %100 = fmul fast float %99, %83
  %101 = call float @dx.op.tertiary.f32(i32 46, float %35, float %93, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %38, float %10, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %81, %34
  %104 = fmul fast float %103, %83
  %105 = call float @dx.op.tertiary.f32(i32 46, float %35, float %94, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %38, float %11, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.dot3.f32(i32 55, float %98, float %102, float %106, float %98, float %102, float %106)  ; Dot3(ax,ay,az,bx,by,bz)
  %108 = call float @dx.op.unary.f32(i32 25, float %107)  ; Rsqrt(value)
  %109 = fmul fast float %108, %98
  %110 = fmul fast float %108, %102
  %111 = fmul fast float %108, %106
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = fsub fast float %26, %113
  %125 = fsub fast float %27, %114
  %126 = fsub fast float %28, %115
  %127 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %124, float %125, float %126)  ; Dot3(ax,ay,az,bx,by,bz)
  %128 = call float @dx.op.unary.f32(i32 25, float %127)  ; Rsqrt(value)
  %129 = fmul fast float %128, %125
  %130 = fmul fast float %128, %126
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 0
  %133 = extractvalue %dx.types.CBufRet.f32 %131, 1
  %134 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 0
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %141 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %142 = extractvalue %dx.types.CBufRet.f32 %139, 2
  %143 = fsub fast float %26, %132
  %144 = fsub fast float %27, %133
  %145 = fsub fast float %28, %134
  %146 = call float @dx.op.dot3.f32(i32 55, float %143, float %144, float %145, float %143, float %144, float %145)  ; Dot3(ax,ay,az,bx,by,bz)
  %147 = call float @dx.op.unary.f32(i32 25, float %146)  ; Rsqrt(value)
  %148 = fmul fast float %147, %144
  %149 = fmul fast float %147, %145
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %161 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %162 = fsub fast float %26, %151
  %163 = fsub fast float %27, %152
  %164 = fsub fast float %28, %153
  %165 = call float @dx.op.dot3.f32(i32 55, float %162, float %163, float %164, float %162, float %163, float %164)  ; Dot3(ax,ay,az,bx,by,bz)
  %166 = call float @dx.op.unary.f32(i32 25, float %165)  ; Rsqrt(value)
  %167 = fmul fast float %166, %163
  %168 = fmul fast float %166, %164
  %169 = fsub fast float -0.000000e+00, %114
  %170 = fsub fast float -0.000000e+00, %115
  %171 = fsub fast float -0.000000e+00, %133
  %172 = fsub fast float -0.000000e+00, %134
  %173 = fsub fast float -0.000000e+00, %152
  %174 = fsub fast float -0.000000e+00, %153
  %175 = fmul fast float %109, %113
  %176 = fsub fast float -0.000000e+00, %175
  %177 = call float @dx.op.tertiary.f32(i32 46, float %169, float %110, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %170, float %111, float %177)  ; FMad(a,b,c)
  %179 = fmul fast float %109, %132
  %180 = fsub fast float -0.000000e+00, %179
  %181 = call float @dx.op.tertiary.f32(i32 46, float %171, float %110, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %172, float %111, float %181)  ; FMad(a,b,c)
  %183 = fmul fast float %109, %151
  %184 = fsub fast float -0.000000e+00, %183
  %185 = call float @dx.op.tertiary.f32(i32 46, float %173, float %110, float %184)  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %174, float %111, float %185)  ; FMad(a,b,c)
  %187 = fmul fast float %124, %109
  %188 = fmul fast float %187, %128
  %189 = call float @dx.op.tertiary.f32(i32 46, float %129, float %110, float %188)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %130, float %111, float %189)  ; FMad(a,b,c)
  %191 = fmul fast float %143, %109
  %192 = fmul fast float %191, %147
  %193 = call float @dx.op.tertiary.f32(i32 46, float %148, float %110, float %192)  ; FMad(a,b,c)
  %194 = call float @dx.op.tertiary.f32(i32 46, float %149, float %111, float %193)  ; FMad(a,b,c)
  %195 = fmul fast float %162, %109
  %196 = fmul fast float %195, %166
  %197 = call float @dx.op.tertiary.f32(i32 46, float %167, float %110, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %168, float %111, float %197)  ; FMad(a,b,c)
  %199 = fcmp fast olt float %178, 0.000000e+00
  %200 = fcmp fast olt float %182, 0.000000e+00
  %201 = fcmp fast olt float %186, 0.000000e+00
  %202 = select i1 %199, float 0.000000e+00, float 1.000000e+00
  %203 = select i1 %200, float 0.000000e+00, float 1.000000e+00
  %204 = select i1 %201, float 0.000000e+00, float 1.000000e+00
  %205 = fmul fast float %202, %178
  %206 = fmul fast float %203, %182
  %207 = fmul fast float %204, %186
  %208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %209 = extractvalue %dx.types.CBufRet.f32 %208, 3
  %210 = call float @dx.op.binary.f32(i32 35, float %190, float 0.000000e+00)  ; FMax(a,b)
  %211 = call float @dx.op.binary.f32(i32 35, float %194, float 0.000000e+00)  ; FMax(a,b)
  %212 = call float @dx.op.binary.f32(i32 35, float %198, float 0.000000e+00)  ; FMax(a,b)
  %213 = fmul fast float %210, %202
  %214 = fmul fast float %211, %203
  %215 = fmul fast float %212, %204
  %216 = call float @dx.op.unary.f32(i32 23, float %213)  ; Log(value)
  %217 = call float @dx.op.unary.f32(i32 23, float %214)  ; Log(value)
  %218 = call float @dx.op.unary.f32(i32 23, float %215)  ; Log(value)
  %219 = fmul fast float %216, %209
  %220 = fmul fast float %217, %209
  %221 = fmul fast float %218, %209
  %222 = call float @dx.op.unary.f32(i32 21, float %219)  ; Exp(value)
  %223 = call float @dx.op.unary.f32(i32 21, float %220)  ; Exp(value)
  %224 = call float @dx.op.unary.f32(i32 21, float %221)  ; Exp(value)
  %225 = fmul fast float %222, %178
  %226 = fmul fast float %223, %182
  %227 = fmul fast float %224, %186
  %228 = fmul fast float %205, %117
  %229 = call float @dx.op.tertiary.f32(i32 46, float %206, float %136, float %228)  ; FMad(a,b,c)
  %230 = call float @dx.op.tertiary.f32(i32 46, float %207, float %155, float %229)  ; FMad(a,b,c)
  %231 = fmul fast float %205, %118
  %232 = call float @dx.op.tertiary.f32(i32 46, float %206, float %137, float %231)  ; FMad(a,b,c)
  %233 = call float @dx.op.tertiary.f32(i32 46, float %207, float %156, float %232)  ; FMad(a,b,c)
  %234 = fmul fast float %205, %119
  %235 = call float @dx.op.tertiary.f32(i32 46, float %206, float %138, float %234)  ; FMad(a,b,c)
  %236 = call float @dx.op.tertiary.f32(i32 46, float %207, float %157, float %235)  ; FMad(a,b,c)
  %237 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.f32 %237, 0
  %239 = extractvalue %dx.types.CBufRet.f32 %237, 1
  %240 = extractvalue %dx.types.CBufRet.f32 %237, 2
  %241 = fmul fast float %238, %230
  %242 = fmul fast float %239, %233
  %243 = fmul fast float %240, %236
  %244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.f32 %244, 0
  %246 = extractvalue %dx.types.CBufRet.f32 %244, 1
  %247 = extractvalue %dx.types.CBufRet.f32 %244, 2
  %248 = fadd fast float %241, %245
  %249 = fadd fast float %242, %246
  %250 = fadd fast float %243, %247
  %251 = fmul fast float %225, %121
  %252 = call float @dx.op.tertiary.f32(i32 46, float %226, float %140, float %251)  ; FMad(a,b,c)
  %253 = call float @dx.op.tertiary.f32(i32 46, float %227, float %159, float %252)  ; FMad(a,b,c)
  %254 = fmul fast float %225, %122
  %255 = call float @dx.op.tertiary.f32(i32 46, float %226, float %141, float %254)  ; FMad(a,b,c)
  %256 = call float @dx.op.tertiary.f32(i32 46, float %227, float %160, float %255)  ; FMad(a,b,c)
  %257 = fmul fast float %225, %123
  %258 = call float @dx.op.tertiary.f32(i32 46, float %226, float %142, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %227, float %161, float %258)  ; FMad(a,b,c)
  %260 = extractvalue %dx.types.CBufRet.f32 %208, 0
  %261 = extractvalue %dx.types.CBufRet.f32 %208, 1
  %262 = extractvalue %dx.types.CBufRet.f32 %208, 2
  %263 = fmul fast float %260, %253
  %264 = fmul fast float %261, %256
  %265 = fmul fast float %262, %259
  %266 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %3, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %267 = extractvalue %dx.types.ResRet.f32 %266, 0
  %268 = extractvalue %dx.types.ResRet.f32 %266, 1
  %269 = extractvalue %dx.types.ResRet.f32 %266, 2
  %270 = extractvalue %dx.types.ResRet.f32 %266, 3
  %271 = fmul fast float %270, %8
  %272 = fmul fast float %248, %5
  %273 = fmul fast float %272, %267
  %274 = fmul fast float %249, %6
  %275 = fmul fast float %274, %268
  %276 = fmul fast float %250, %7
  %277 = fmul fast float %276, %269
  %278 = fmul fast float %263, %271
  %279 = fmul fast float %264, %271
  %280 = fmul fast float %265, %271
  %281 = fadd fast float %273, %278
  %282 = fadd fast float %275, %279
  %283 = fadd fast float %277, %280
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %281)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %282)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %283)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %271)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !9, !11}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{!10}
!10 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!11 = !{!12}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!14 = !{void ()* @PSNormalPixelLightingTxNoFogSpec, !"PSNormalPixelLightingTxNoFogSpec", !15, !4, null}
!15 = !{!16, !27, null}
!16 = !{!17, !20, !23, !25}
!17 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 2, i32 0, i8 0, !19}
!18 = !{i32 0}
!19 = !{i32 3, i32 3}
!20 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!21 = !{i32 1}
!22 = !{i32 3, i32 7}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 3, i32 2, i8 0, !22}
!24 = !{i32 2}
!25 = !{i32 3, !"COLOR", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 3, i8 0, !26}
!26 = !{i32 3, i32 15}
!27 = !{!28}
!28 = !{i32 0, !"SV_Target", i8 9, i8 16, !18, i8 0, i32 1, i8 4, i32 0, i8 0, !26}

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTxNoFogSpec[] = {
  0x44, 0x58, 0x42, 0x43, 0xfc, 0xc6, 0x58, 0x2f, 0x2c, 0xfd, 0xa0, 0x24,
  0x05, 0x66, 0xe7, 0x88, 0x7a, 0x5e, 0xbf, 0x95, 0x01, 0x00, 0x00, 0x00,
  0x53, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0x7f, 0x02, 0x00, 0x00, 0x3b, 0x03, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00,
  0xa3, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67,
  0x65, 0x74, 0x00, 0x50, 0x53, 0x56, 0x30, 0x3c, 0x01, 0x00, 0x00, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xb4, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49,
  0x4c, 0x44, 0x4e, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x4e, 0x6f, 0x72, 0x6d,
  0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
  0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78, 0x65,
  0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x4e,
  0x6f, 0x46, 0x6f, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x64, 0x62,
  0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x99, 0x26, 0xc0, 0xf5, 0xdb, 0xf9, 0x6d, 0xed, 0x13,
  0x99, 0x89, 0x2e, 0x22, 0x80, 0x94, 0x41, 0x44, 0x58, 0x49, 0x4c, 0xa8,
  0x10, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x2a, 0x04, 0x00, 0x00, 0x44,
  0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x90,
  0x10, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x21,
  0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06,
  0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e,
  0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4,
  0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48,
  0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4,
  0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1,
  0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08,
  0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40,
  0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d,
  0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49,
  0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20,
  0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x7f,
  0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13,
  0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12,
  0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x08, 0x40,
  0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29,
  0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62,
  0x20, 0xe4, 0xa8, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x9f, 0xdb, 0xa8,
  0x62, 0x25, 0x26, 0xbf, 0xb8, 0x6d, 0x44, 0x0c, 0xc3, 0x30, 0x50, 0x71,
  0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10,
  0x28, 0x58, 0x0a, 0xa1, 0x10, 0x0c, 0x41, 0x4d, 0x41, 0x06, 0x62, 0x18,
  0x86, 0x61, 0x18, 0xe8, 0x29, 0xc3, 0x40, 0x0c, 0x14, 0xdd, 0x34, 0x5c,
  0xfe, 0x84, 0x3d, 0x84, 0xe4, 0xaf, 0x84, 0xb4, 0x12, 0x93, 0x5f, 0xdc,
  0x36, 0x2a, 0x86, 0x61, 0x18, 0x88, 0xc2, 0x4c, 0x04, 0xc3, 0x0c, 0xc3,
  0x30, 0x10, 0x04, 0x31, 0x10, 0x55, 0x8c, 0x81, 0x18, 0x86, 0x61, 0x20,
  0xab, 0x10, 0x03, 0x31, 0x0c, 0x84, 0x95, 0x62, 0x20, 0x86, 0x61, 0x20,
  0x6d, 0x8e, 0x20, 0x28, 0x06, 0x43, 0x14, 0x04, 0xc1, 0x51, 0x37, 0x10,
  0x30, 0x8c, 0x40, 0x0c, 0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc,
  0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8,
  0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0,
  0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0,
  0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8,
  0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0,
  0x43, 0x39, 0xa0, 0x80, 0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61,
  0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41,
  0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81,
  0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81,
  0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x00,
  0x86, 0x24, 0x0e, 0x23, 0x0c, 0xc3, 0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10,
  0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50,
  0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30,
  0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10,
  0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0xa0,
  0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4, 0x90,
  0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x20, 0x66, 0x12, 0x83, 0x71, 0x60, 0x87,
  0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87,
  0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87,
  0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87,
  0x70, 0xa0, 0x07, 0x36, 0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0, 0x03,
  0x24, 0x90, 0x25, 0x99, 0x39, 0x40, 0x26, 0x01, 0x78, 0xde, 0x70, 0xf9,
  0xc0, 0x82, 0x18, 0x0d, 0x43, 0x34, 0x93, 0xbf, 0x10, 0x06, 0x20, 0x60,
  0x7e, 0x0a, 0x44, 0x00, 0x43, 0x4c, 0x44, 0x24, 0xa1, 0x06, 0x24, 0xc9,
  0x01, 0x45, 0x51, 0x92, 0x04, 0x53, 0x34, 0x25, 0xf5, 0x26, 0x69, 0x8a,
  0x28, 0x61, 0xf2, 0x59, 0x80, 0x79, 0x16, 0x22, 0x62, 0x27, 0x60, 0x22,
  0x50, 0x40, 0x10, 0x9b, 0x12, 0x04, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87,
  0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87,
  0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00,
  0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0,
  0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0,
  0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40,
  0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x34, 0x40, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x79, 0x80, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x13, 0x01, 0x01, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x87, 0x02, 0x02,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x05,
  0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e,
  0x0c, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86,
  0x3c, 0x1a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x79, 0x3a, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x32,
  0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6,
  0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x14, 0x8a, 0xa1, 0x08, 0x4a,
  0xa2, 0x80, 0x0d, 0xca, 0xa0, 0x1c, 0xca, 0x83, 0x8a, 0x92, 0x18, 0x01,
  0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1, 0x71, 0x06, 0x80, 0xce, 0x19,
  0x00, 0x5a, 0x67, 0x00, 0xa8, 0x9d, 0x01, 0x20, 0x77, 0x2c, 0x09, 0x22,
  0x9e, 0x07, 0x00, 0x8e, 0xe3, 0x00, 0x8e, 0xe3, 0x00, 0x02, 0x81, 0x78,
  0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x1a,
  0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x83, 0x0c, 0x6f, 0x0c, 0x24,
  0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10, 0x88, 0x65, 0x82, 0x40, 0x30,
  0x1b, 0x84, 0x81, 0x98, 0x20, 0x10, 0xcd, 0x06, 0x61, 0x30, 0x28, 0xc0,
  0xcd, 0x4d, 0x10, 0x08, 0x67, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x61, 0x0c,
  0x36, 0x02, 0x13, 0x04, 0xe2, 0x99, 0x20, 0x10, 0xd0, 0x06, 0x81, 0x70,
  0x36, 0x24, 0xc4, 0xc2, 0x10, 0xc4, 0xd0, 0x10, 0xcf, 0x04, 0xe1, 0x0c,
  0xb8, 0x0d, 0xc9, 0x10, 0x31, 0xc4, 0x30, 0x34, 0xc4, 0xb3, 0x41, 0x80,
  0xa4, 0x09, 0xc2, 0x1a, 0x74, 0x13, 0x04, 0x22, 0xda, 0x80, 0x10, 0x14,
  0x43, 0x10, 0x43, 0x05, 0x6c, 0x08, 0xac, 0x09, 0x42, 0x1b, 0x78, 0x1b,
  0x10, 0x02, 0x63, 0x08, 0x62, 0x20, 0x80, 0x0d, 0x41, 0xb6, 0x81, 0x98,
  0x80, 0x4b, 0x9b, 0x20, 0xb8, 0xc1, 0xb7, 0x21, 0xe0, 0x26, 0x08, 0x02,
  0x40, 0x30, 0x80, 0x9a, 0x72, 0x7a, 0x93, 0x6b, 0x0b, 0x63, 0x83, 0x4a,
  0xc3, 0x2b, 0x63, 0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xa3,
  0xc2, 0x73, 0x7a, 0x33, 0x7a, 0x3b, 0x9b, 0x82, 0x2b, 0x1b, 0x23, 0x42,
  0x55, 0x84, 0x35, 0xf4, 0xf4, 0x24, 0x45, 0x34, 0x41, 0x28, 0xaa, 0x09,
  0x42, 0x61, 0x6d, 0x08, 0x88, 0x09, 0x42, 0x71, 0x4d, 0x10, 0x08, 0x69,
  0x83, 0x50, 0x06, 0x65, 0xb0, 0x61, 0x21, 0xc0, 0x20, 0x0c, 0xc4, 0x60,
  0x0c, 0xc8, 0x60, 0x20, 0x03, 0x42, 0x0c, 0xcc, 0x60, 0x43, 0x30, 0x4c,
  0x10, 0x0a, 0x6c, 0x82, 0x40, 0x4c, 0x1b, 0x84, 0x32, 0x50, 0x83, 0x0d,
  0xcb, 0x00, 0x06, 0x61, 0x20, 0x06, 0x68, 0x40, 0x06, 0x43, 0x1a, 0x0c,
  0x62, 0xb0, 0x06, 0x1b, 0x82, 0x66, 0x82, 0x50, 0x64, 0x1b, 0x96, 0x06,
  0x0c, 0xc2, 0x40, 0x0c, 0xda, 0x80, 0x0c, 0x06, 0x37, 0x68, 0xc4, 0x60,
  0x0d, 0x58, 0x0c, 0x3d, 0x31, 0x3d, 0x49, 0x4d, 0x10, 0x08, 0x6a, 0x83,
  0x50, 0x06, 0x71, 0xb0, 0x61, 0x29, 0x03, 0x38, 0x08, 0x03, 0x31, 0x18,
  0x03, 0x32, 0x18, 0xd2, 0xa0, 0x0c, 0xc4, 0x40, 0x0e, 0x36, 0x10, 0x67,
  0xc0, 0x06, 0x6f, 0x30, 0x07, 0x4c, 0xa6, 0xac, 0xbe, 0xa8, 0xc2, 0xe4,
  0xce, 0xca, 0xe8, 0x26, 0x08, 0x85, 0xb6, 0x61, 0x21, 0xea, 0x20, 0x0c,
  0xec, 0x60, 0x0c, 0xc4, 0x60, 0x48, 0x03, 0x42, 0x0c, 0xe4, 0x60, 0x43,
  0x70, 0x07, 0x1b, 0x06, 0x3a, 0xc0, 0x03, 0x60, 0x43, 0xe1, 0x7d, 0x79,
  0xb0, 0x01, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2, 0xc8, 0xca, 0xdc,
  0xe8, 0xa6, 0x04, 0x41, 0x15, 0x32, 0x3c, 0x17, 0xbb, 0x32, 0xb9, 0xb9,
  0xb4, 0x37, 0xb7, 0x29, 0x01, 0xd1, 0x84, 0x0c, 0xcf, 0xc5, 0x2e, 0x8c,
  0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x60, 0xd4, 0x21, 0xc3, 0x73, 0x99, 0x43,
  0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63, 0x9b, 0x12, 0x24,
  0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea, 0xe4, 0xc6, 0xca,
  0xe6, 0xa6, 0x04, 0x5a, 0x1d, 0x32, 0x3c, 0x17, 0xbb, 0xb4, 0xb2, 0xbb,
  0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2, 0x29, 0x01, 0x57, 0x87, 0x0c,
  0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea, 0x2d, 0xcd, 0x8d, 0x6e,
  0x6e, 0x4a, 0x90, 0x07, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50,
  0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14,
  0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79,
  0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e,
  0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1,
  0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc,
  0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74,
  0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a,
  0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e,
  0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e,
  0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21,
  0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0,
  0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc,
  0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72,
  0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76,
  0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f,
  0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c,
  0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03,
  0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1,
  0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61,
  0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8,
  0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94,
  0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0,
  0xc3, 0x0c, 0xc5, 0x61, 0x07, 0x76, 0xb0, 0x87, 0x76, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x77, 0x80, 0x87, 0x19, 0xd9, 0x43, 0x0e, 0xf8, 0xe0, 0x06,
  0xe8, 0xc0, 0x0e, 0x6e, 0x20, 0x0f, 0xe5, 0x30, 0x0f, 0xef, 0x50, 0x0f,
  0xf2, 0x30, 0x0e, 0xe5, 0xe0, 0x06, 0xe1, 0x40, 0x0f, 0xf4, 0x20, 0x0f,
  0xe9, 0x20, 0x0e, 0xf5, 0x40, 0x0f, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x71,
  0x20, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x29, 0x7b,
  0x3a, 0x11, 0x03, 0x2c, 0x29, 0x72, 0x11, 0x4b, 0x89, 0x18, 0xc7, 0x84,
  0x34, 0x46, 0x7b, 0x9d, 0xce, 0xe7, 0x18, 0xec, 0x43, 0x08, 0x86, 0x00,
  0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d,
  0xdb, 0xc0, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11,
  0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x29,
  0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0,
  0x0c, 0x0b, 0x61, 0x07, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x64,
  0xfb, 0xc5, 0x6d, 0x1b, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33,
  0xdd, 0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2,
  0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x06, 0xd0, 0x70,
  0xf9, 0xce, 0xe3, 0x4b, 0x00, 0xf3, 0x2c, 0x84, 0x5f, 0xdc, 0xb6, 0x09,
  0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4,
  0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f,
  0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05, 0xcf, 0x70,
  0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00, 0x61,
  0x20, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10,
  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xc4, 0x8d, 0x00, 0x50, 0x51,
  0x02, 0x44, 0x94, 0x45, 0x41, 0x14, 0x45, 0xc1, 0x14, 0xd7, 0x0c, 0x40,
  0x21, 0x94, 0x5d, 0xb9, 0x95, 0x4c, 0x99, 0x06, 0x14, 0x6a, 0x40, 0xc9,
  0x95, 0x51, 0xb9, 0x94, 0x4a, 0xe1, 0x15, 0x46, 0xb1, 0xd1, 0x30, 0x46,
  0x00, 0x82, 0x20, 0x88, 0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08,
  0x06, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x03, 0x30, 0x02, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x00, 0x00, 0x00, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0xc5, 0x41, 0x53, 0x06, 0x70, 0x00,
  0x07, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x74, 0x72, 0xe0, 0x98,
  0x01, 0x1c, 0xc0, 0x01, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xdd,
  0x1c, 0x3c, 0x64, 0x10, 0x07, 0x71, 0xd0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x41, 0x47, 0x07, 0xd0, 0x19, 0xc8, 0x81, 0x1c, 0x78, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0xc1, 0xd5, 0x06, 0x73, 0x90, 0x06,
  0xd8, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7f, 0x80, 0xb9, 0x01,
  0x1d, 0x7c, 0xd9, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa0, 0x90,
  0xbd, 0x41, 0x1d, 0xa8, 0x81, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x46, 0x28, 0x68, 0x70, 0x60, 0x07, 0x69, 0xb0, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x21, 0x0a, 0x1b, 0x1d, 0xdc, 0x41, 0x1b, 0x70, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x8c, 0x02, 0x57, 0x07, 0x78, 0x30,
  0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa4, 0xd0, 0xd9,
  0x41, 0x1e, 0xb8, 0x81, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46,
  0x29, 0x78, 0x7b, 0xa0, 0x07, 0x70, 0xf0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0x61, 0x0a, 0x1f, 0x1f, 0xec, 0x81, 0x19, 0x80, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa7, 0x00, 0x06, 0x7d, 0xc0, 0x07,
  0x71, 0x10, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xa0, 0x42,
  0x18, 0xf4, 0x41, 0x1f, 0xcc, 0x81, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0x91, 0x0a, 0x62, 0xe0, 0x07, 0x7e, 0x90, 0x06, 0x63, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x0d, 0x2a, 0x88, 0x41, 0x83, 0x8d,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x49,
  0x7c, 0x6c, 0x48, 0xe2, 0x63, 0x43, 0x12, 0x9f, 0x11, 0x83, 0x05, 0x00,
  0x41, 0x30, 0x78, 0x5c, 0x01, 0x0d, 0x06, 0x21, 0x18, 0x84, 0x60, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x57, 0x40, 0x83, 0xc0, 0x8a, 0x40,
  0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62, 0x90, 0xcf, 0x88, 0xc1, 0x03, 0x80,
  0x20, 0x18, 0x50, 0xb1, 0x50, 0x06, 0x9c, 0xe6, 0x34, 0xdf, 0xb7, 0x0a,
  0xab, 0x00, 0x07, 0xdf, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0x81, 0x09,
  0x64, 0x20, 0x1f, 0x13, 0xca, 0x40, 0x3e, 0x26, 0x9c, 0x01, 0x7c, 0x4c,
  0x40, 0x03, 0xf8, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x75, 0x0b,
  0x6a, 0x20, 0x04, 0x42, 0x60, 0x68, 0x10, 0xc4, 0x67, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0xa2, 0x5d, 0xd8, 0x83, 0x60, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x22, 0x5e, 0xa8, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10,
  0x0c, 0xa2, 0x5e, 0xb0, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x22, 0x5f, 0xb8, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2,
  0x5f, 0xb8, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x70,
  0xc0, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x70, 0xc8,
  0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x71, 0xd8, 0x03,
  0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x71, 0xe0, 0x03, 0x6f,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x72, 0xe0, 0x03, 0x30, 0x18,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xa8, 0x1c, 0xfa, 0x00, 0x0c, 0xac,
  0x48, 0xe4, 0x63, 0x47, 0x22, 0x1f, 0x13, 0x82, 0xf8, 0x98, 0xb2, 0xc8,
  0xc7, 0x12, 0x47, 0x3e, 0x26, 0x04, 0xf1, 0x31, 0x06, 0x92, 0x8f, 0x39,
  0x90, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xc1, 0x23, 0x1f, 0x2b, 0x1e, 0xf9,
  0x98, 0x10, 0xc4, 0xc7, 0x94, 0x48, 0x3e, 0x56, 0x50, 0xf2, 0x31, 0x21,
  0x88, 0x8f, 0x29, 0x96, 0x7c, 0xcc, 0xb1, 0xe4, 0x63, 0x42, 0x10, 0x1f,
  0x6b, 0x34, 0xf9, 0xd8, 0xc2, 0xc9, 0xc7, 0x84, 0x20, 0x3e, 0xd6, 0x7c,
  0xf2, 0x31, 0xca, 0x93, 0x8f, 0x09, 0x41, 0x7c, 0xcc, 0x0a, 0x03, 0xf9,
  0x18, 0x35, 0x06, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x41, 0x9f, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0xf3, 0x87, 0x70, 0xf0, 0x90, 0xc0,
  0x9e, 0x30, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x20,
  0x31, 0x0e, 0x60, 0x70, 0x04, 0xe6, 0x8c, 0x81, 0x7c, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x40, 0x13, 0x89, 0x72, 0x10, 0x03, 0x23, 0x18, 0x31,
  0x58, 0x00, 0x10, 0x04, 0x83, 0x07, 0x25, 0xc4, 0xa1, 0x18, 0x82, 0x62,
  0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x42, 0x09, 0x71, 0x08,
  0x0c, 0x33, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x66,
  0x12, 0xe9, 0x50, 0x06, 0x50, 0x60, 0x17, 0x1a, 0xc8, 0x67, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x34, 0x94, 0x58, 0x87, 0x33, 0x78, 0x02, 0xb3,
  0xd4, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xa9, 0x44,
  0x3b, 0xa4, 0x81, 0x13, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0xc1, 0x03,
  0x13, 0xea, 0x50, 0x0c, 0x41, 0x31, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0x10, 0xc1, 0x84, 0x3a, 0x04, 0x16, 0x1c, 0xf2, 0x31, 0xc1, 0x90,
  0x8f, 0x0d, 0x85, 0x7c, 0x4c, 0xea, 0x03, 0xf9, 0x58, 0xd0, 0xc8, 0x67,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x34, 0x99, 0xa8, 0x07, 0x3f, 0x28,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0x66, 0xc2, 0x1e, 0xf8,
  0x20, 0x17, 0x02, 0xa3, 0x42, 0x41, 0x3e, 0x16, 0x44, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x03, 0xcd, 0x26, 0xf2, 0x41, 0x14, 0x90, 0x60,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0x9b, 0xd0, 0x07, 0x50, 0xe0,
  0x85, 0xc0, 0xac, 0x52, 0x90, 0x8f, 0x05, 0x95, 0x7c, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x40, 0xd3, 0x89, 0x7e, 0x30, 0x85, 0x25, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x03, 0x6d, 0x27, 0xfc, 0x81, 0x14, 0x7e, 0x21,
  0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0x27, 0x2c, 0xf6, 0x21, 0x29,
  0x82, 0xa4, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x0a, 0x8b,
  0x7d, 0x08, 0x2c, 0x58, 0xe4, 0x63, 0x02, 0x22, 0x1f, 0x1b, 0x0a, 0xf9,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x73, 0x16, 0x21, 0xc1, 0x0e,
  0x38, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xd0, 0xac, 0x45, 0x49, 0xc0, 0x03,
  0x58, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x34, 0x6f, 0x91, 0x12, 0xf4, 0x20,
  0x16, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60,
  0xe2, 0xb0, 0xc4, 0xc7, 0xc4, 0x61, 0x89, 0x8f, 0x89, 0xc3, 0x12, 0x9f,
  0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x78, 0xea, 0xe2, 0x25, 0x06, 0x21,
  0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0xba, 0x78,
  0x89, 0xc0, 0x02, 0x42, 0x3e, 0x26, 0x10, 0xf2, 0x19, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0x46, 0x2f, 0x68, 0xe2, 0x1f, 0x6a, 0x62, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xa0, 0xf1, 0x0b, 0x9c, 0x18, 0x09, 0xb7, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0x68, 0x44, 0x83, 0x27, 0x4e, 0x22, 0x2c, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0xea, 0x61, 0x89, 0x8f,
  0xd5, 0xc3, 0x12, 0x1f, 0xab, 0x87, 0x25, 0x3e, 0x23, 0x06, 0x0b, 0x00,
  0x82, 0x60, 0xf0, 0xa0, 0x86, 0x58, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xa8, 0x21, 0x16, 0x81, 0x05, 0x84,
  0x7c, 0x4c, 0x20, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x4d,
  0x6b, 0x9c, 0x85, 0x4c, 0x8c, 0xc6, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x13,
  0x1b, 0x6b, 0x61, 0x13, 0x71, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xd0, 0xd4,
  0xc6, 0x5b, 0xe8, 0x84, 0x5d, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0x82, 0xa1, 0xc4, 0x12, 0x1f, 0x43, 0x89, 0x25, 0x3e,
  0x86, 0x12, 0x4b, 0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0xd9,
  0x8d, 0xba, 0x18, 0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x88, 0x76, 0xa3, 0x2e, 0x02, 0x0b, 0x08, 0xf9, 0x98, 0x40, 0xc8,
  0xc7, 0xd2, 0xe2, 0x0e, 0xe2, 0x63, 0x6a, 0x71, 0x07, 0xf1, 0xb1, 0xb5,
  0x30, 0x83, 0xf8, 0x18, 0x5b, 0x98, 0x41, 0x7c, 0xac, 0x2d, 0xaa, 0xf8,
  0x98, 0x5b, 0x54, 0xf1, 0x31, 0x51, 0xf0, 0x03, 0xf9, 0x18, 0x5c, 0x04,
  0xf1, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x4d, 0x3c, 0x4a, 0x03,
  0x19, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0xf1, 0x30,
  0x0d, 0x64, 0x14, 0x02, 0x33, 0x85, 0x37, 0x90, 0x8f, 0xd1, 0x45, 0x10,
  0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xcc, 0x23, 0x35, 0x94,
  0x53, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0x3b, 0x0f, 0xd5,
  0x50, 0x4e, 0x21, 0x30, 0x55, 0x00, 0x03, 0xf9, 0x18, 0x5e, 0x04, 0xf1,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x4d, 0x3d, 0x5a, 0x83, 0x59,
  0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0xf5, 0x70, 0x0d,
  0x66, 0x15, 0x02, 0xfb, 0x03, 0x57, 0x90, 0x8f, 0x05, 0x7c, 0x20, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xdc, 0x23, 0x36, 0xf8, 0xe0,
  0x15, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xde, 0x43, 0x36,
  0xf8, 0xe0, 0x15, 0x02, 0x83, 0x03, 0x59, 0x90, 0x8f, 0x05, 0x6d, 0x20,
  0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xe4, 0xa3, 0x36, 0xda,
  0x60, 0x16, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0xe6, 0xc3,
  0x36, 0xda, 0x60, 0x16, 0x02, 0x0b, 0x03, 0x5b, 0x90, 0x8f, 0x05, 0x9e,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0xb3, 0x8f, 0xdc, 0xf0,
  0x6e, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0xed, 0x3e, 0x74,
  0xc3, 0xbb, 0x85, 0x60, 0x38, 0xa2, 0x42, 0x0d, 0xe2, 0x1b, 0x8e, 0x90,
  0x52, 0x83, 0xf8, 0x86, 0x23, 0x1e, 0xd5, 0x20, 0xbe, 0xe9, 0x86, 0xd5,
  0x68, 0x8d, 0x61, 0xba, 0x81, 0x35, 0x5c, 0x63, 0x98, 0x6e, 0x68, 0x8d,
  0xd7, 0x18, 0x6c, 0xd8, 0xe4, 0x63, 0x03, 0x26, 0x1f, 0x1b, 0x2a, 0xf9,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x73, 0x22, 0xe1, 0xc1, 0x1a,
  0xfb, 0x31, 0x9a, 0x10, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x80,
  0x91, 0x48, 0x6f, 0x50, 0xb3, 0x31, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x58, 0x89, 0xf8, 0x46, 0x44, 0x1b, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x80, 0x99, 0xc8, 0x6f, 0x38, 0xb5, 0x61, 0xc3, 0x22, 0x1f, 0x1b, 0x16,
  0xf9, 0xd8, 0xb0, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2,
  0x16, 0x11, 0x8f, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x17,
  0x19, 0x8f, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x17, 0x21,
  0x8f, 0xc1, 0x06, 0x45, 0x3e, 0x36, 0x2c, 0xf2, 0xb1, 0x81, 0x91, 0xcf,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0x33, 0x72, 0x1e, 0xc3, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0x34, 0x82, 0x1e, 0xc3, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x44, 0x35, 0x92, 0x1e, 0x83, 0x0d, 0x6f, 0x20,
  0x1f, 0x1b, 0xd8, 0x40, 0x3e, 0x36, 0xa4, 0x81, 0x7c, 0xec, 0x7a, 0x07,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x66, 0x23, 0xf9, 0x71,
  0xf5, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xda, 0x8d, 0xe8,
  0xc7, 0xb5, 0x0a, 0x81, 0x69, 0xf1, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xd0, 0x72, 0x84, 0x3f, 0xb4, 0x5f, 0x08, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x40, 0xd3, 0x91, 0xfe, 0xd0, 0x5a, 0x21, 0xb0, 0x6e,
  0x1e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a, 0x8f, 0xfc,
  0x47, 0x17, 0x0e, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x3d,
  0x02, 0x22, 0xdd, 0x2b, 0x04, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xd0,
  0x90, 0x89, 0x7f, 0xa4, 0xc7, 0x8e, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x8b, 0x7c, 0x6c, 0x48, 0xe4, 0x63,
  0xc3, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x68, 0xd6, 0xa4,
  0x44, 0xe0, 0x63, 0x4c, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0xc1, 0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0, 0xb1, 0x63, 0x80,
  0x8f, 0x69, 0x22, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0,
  0xda, 0x04, 0x46, 0x34, 0x78, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x40, 0x73, 0x93, 0x18, 0xd1, 0x7c, 0x21, 0xb0, 0x8e, 0x24, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a, 0x9c, 0xcc, 0x48, 0x27, 0x0f,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x71, 0x42, 0x23, 0x1d,
  0x38, 0x04, 0x06, 0x06, 0x26, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xd0, 0xe6, 0xc4, 0x46, 0xc0, 0x80, 0x1e, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xd0, 0xe8, 0xe4, 0x46, 0xc0, 0x40, 0x1c, 0x82, 0xd1,
  0x04, 0x3a, 0x00, 0x46, 0x13, 0xea, 0x20, 0x18, 0x4d, 0xb0, 0x03, 0xc1,
  0x06, 0x45, 0x3e, 0x36, 0x20, 0xf2, 0xb1, 0xc1, 0x90, 0xcf, 0x88, 0xc1,
  0x03, 0x80, 0x20, 0x18, 0x50, 0x7e, 0x22, 0x23, 0x28, 0x72, 0x22, 0xfb,
  0xa1, 0x1f, 0x2c, 0xc2, 0x22, 0x78, 0x82, 0x27, 0x3d, 0xc2, 0x22, 0xa3,
  0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40,
  0x0c, 0x16, 0x9c, 0x88, 0x7c, 0x0c, 0x5b, 0x11, 0xf9, 0x58, 0x60, 0xc8,
  0xc7, 0x32, 0x16, 0x91, 0x8f, 0x05, 0x87, 0x7c, 0x4c, 0x6b, 0x11, 0xf9,
  0x58, 0x80, 0xc8, 0xc7, 0x9e, 0x43, 0x3e, 0xf6, 0x20, 0xf2, 0xb1, 0x27,
  0x91, 0x8f, 0x21, 0x03, 0x7c, 0xec, 0x18, 0xe0, 0x63, 0xc6, 0x00, 0x9f,
  0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x68, 0x25, 0x55, 0x54, 0x45,
  0x55, 0x40, 0x65, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x84, 0x56,
  0x52, 0x45, 0x55, 0x54, 0xa5, 0x4e, 0x84, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x40, 0x68, 0x25, 0x55, 0x54, 0x45, 0x55, 0xfe, 0x24, 0x18, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0x84, 0x56, 0x52, 0x45, 0x55, 0x54, 0xa5,
  0x4f, 0x1a, 0x04, 0x00, 0x00, 0x00, 0x00
};
