#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: Compiled\NormalMapEffect_PSNormalPixelLightingTx.pdb
; shader hash: 9962bf4ce88d0df1fb15214d770aff5e
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTx() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.f32 %19, 0
  %21 = extractvalue %dx.types.CBufRet.f32 %19, 1
  %22 = extractvalue %dx.types.CBufRet.f32 %19, 2
  %23 = fsub fast float %20, %13
  %24 = fsub fast float %21, %14
  %25 = fsub fast float %22, %15
  %26 = call float @dx.op.dot3.f32(i32 55, float %23, float %24, float %25, float %23, float %24, float %25)  ; Dot3(ax,ay,az,bx,by,bz)
  %27 = call float @dx.op.unary.f32(i32 25, float %26)  ; Rsqrt(value)
  %28 = fmul fast float %23, %27
  %29 = fmul fast float %24, %27
  %30 = fmul fast float %25, %27
  %31 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %32 = extractvalue %dx.types.ResRet.f32 %31, 0
  %33 = extractvalue %dx.types.ResRet.f32 %31, 1
  %34 = fmul fast float %32, 2.000000e+00
  %35 = fmul fast float %33, 2.000000e+00
  %36 = fadd fast float %34, -1.000000e+00
  %37 = fadd fast float %35, -1.000000e+00
  %38 = call float @dx.op.dot2.f32(i32 54, float %36, float %37, float %36, float %37)  ; Dot2(ax,ay,bx,by)
  %39 = fsub fast float 1.000000e+00, %38
  %40 = call float @dx.op.unary.f32(i32 24, float %39)  ; Sqrt(value)
  %41 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %42 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %43 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %44 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %45 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %46 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %47 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %48 = call float @dx.op.unary.f32(i32 83, float %18)  ; DerivCoarseX(value)
  %49 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %50 = call float @dx.op.unary.f32(i32 84, float %18)  ; DerivCoarseY(value)
  %51 = fmul fast float %46, %42
  %52 = fmul fast float %45, %43
  %53 = fsub fast float %51, %52
  %54 = fmul fast float %44, %43
  %55 = fmul fast float %46, %41
  %56 = fsub fast float %54, %55
  %57 = fmul fast float %45, %41
  %58 = fmul fast float %44, %42
  %59 = fsub fast float %57, %58
  %60 = fmul fast float %59, %45
  %61 = fmul fast float %56, %46
  %62 = fsub fast float %60, %61
  %63 = fmul fast float %53, %46
  %64 = fmul fast float %59, %44
  %65 = fsub fast float %63, %64
  %66 = fmul fast float %56, %44
  %67 = fmul fast float %53, %45
  %68 = fsub fast float %66, %67
  %69 = fmul fast float %56, %43
  %70 = fmul fast float %59, %42
  %71 = fsub fast float %69, %70
  %72 = fmul fast float %59, %41
  %73 = fmul fast float %53, %43
  %74 = fsub fast float %72, %73
  %75 = fmul fast float %53, %42
  %76 = fmul fast float %56, %41
  %77 = fsub fast float %75, %76
  %78 = fmul fast float %62, %47
  %79 = call float @dx.op.tertiary.f32(i32 46, float %49, float %71, float %78)  ; FMad(a,b,c)
  %80 = fmul fast float %65, %47
  %81 = call float @dx.op.tertiary.f32(i32 46, float %49, float %74, float %80)  ; FMad(a,b,c)
  %82 = fmul fast float %68, %47
  %83 = call float @dx.op.tertiary.f32(i32 46, float %49, float %77, float %82)  ; FMad(a,b,c)
  %84 = call float @dx.op.dot3.f32(i32 55, float %79, float %81, float %83, float %79, float %81, float %83)  ; Dot3(ax,ay,az,bx,by,bz)
  %85 = call float @dx.op.unary.f32(i32 25, float %84)  ; Rsqrt(value)
  %86 = fmul fast float %62, %48
  %87 = call float @dx.op.tertiary.f32(i32 46, float %50, float %71, float %86)  ; FMad(a,b,c)
  %88 = fmul fast float %65, %48
  %89 = call float @dx.op.tertiary.f32(i32 46, float %50, float %74, float %88)  ; FMad(a,b,c)
  %90 = fmul fast float %68, %48
  %91 = call float @dx.op.tertiary.f32(i32 46, float %50, float %77, float %90)  ; FMad(a,b,c)
  %92 = call float @dx.op.dot3.f32(i32 55, float %87, float %89, float %91, float %87, float %89, float %91)  ; Dot3(ax,ay,az,bx,by,bz)
  %93 = call float @dx.op.unary.f32(i32 25, float %92)  ; Rsqrt(value)
  %94 = fmul fast float %93, %87
  %95 = fmul fast float %93, %89
  %96 = fmul fast float %93, %91
  %97 = fmul fast float %79, %36
  %98 = fmul fast float %97, %85
  %99 = call float @dx.op.tertiary.f32(i32 46, float %37, float %94, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %40, float %10, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %81, %36
  %102 = fmul fast float %101, %85
  %103 = call float @dx.op.tertiary.f32(i32 46, float %37, float %95, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %40, float %11, float %103)  ; FMad(a,b,c)
  %105 = fmul fast float %83, %36
  %106 = fmul fast float %105, %85
  %107 = call float @dx.op.tertiary.f32(i32 46, float %37, float %96, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %40, float %12, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.dot3.f32(i32 55, float %100, float %104, float %108, float %100, float %104, float %108)  ; Dot3(ax,ay,az,bx,by,bz)
  %110 = call float @dx.op.unary.f32(i32 25, float %109)  ; Rsqrt(value)
  %111 = fmul fast float %110, %100
  %112 = fmul fast float %110, %104
  %113 = fmul fast float %110, %108
  %114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.f32 %114, 0
  %116 = extractvalue %dx.types.CBufRet.f32 %114, 1
  %117 = extractvalue %dx.types.CBufRet.f32 %114, 2
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %126 = fsub fast float %28, %115
  %127 = fsub fast float %29, %116
  %128 = fsub fast float %30, %117
  %129 = call float @dx.op.dot3.f32(i32 55, float %126, float %127, float %128, float %126, float %127, float %128)  ; Dot3(ax,ay,az,bx,by,bz)
  %130 = call float @dx.op.unary.f32(i32 25, float %129)  ; Rsqrt(value)
  %131 = fmul fast float %130, %127
  %132 = fmul fast float %130, %128
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 0
  %135 = extractvalue %dx.types.CBufRet.f32 %133, 1
  %136 = extractvalue %dx.types.CBufRet.f32 %133, 2
  %137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %138 = extractvalue %dx.types.CBufRet.f32 %137, 0
  %139 = extractvalue %dx.types.CBufRet.f32 %137, 1
  %140 = extractvalue %dx.types.CBufRet.f32 %137, 2
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 0
  %143 = extractvalue %dx.types.CBufRet.f32 %141, 1
  %144 = extractvalue %dx.types.CBufRet.f32 %141, 2
  %145 = fsub fast float %28, %134
  %146 = fsub fast float %29, %135
  %147 = fsub fast float %30, %136
  %148 = call float @dx.op.dot3.f32(i32 55, float %145, float %146, float %147, float %145, float %146, float %147)  ; Dot3(ax,ay,az,bx,by,bz)
  %149 = call float @dx.op.unary.f32(i32 25, float %148)  ; Rsqrt(value)
  %150 = fmul fast float %149, %146
  %151 = fmul fast float %149, %147
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %154 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %155 = extractvalue %dx.types.CBufRet.f32 %152, 2
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %158 = extractvalue %dx.types.CBufRet.f32 %156, 1
  %159 = extractvalue %dx.types.CBufRet.f32 %156, 2
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = fsub fast float %28, %153
  %165 = fsub fast float %29, %154
  %166 = fsub fast float %30, %155
  %167 = call float @dx.op.dot3.f32(i32 55, float %164, float %165, float %166, float %164, float %165, float %166)  ; Dot3(ax,ay,az,bx,by,bz)
  %168 = call float @dx.op.unary.f32(i32 25, float %167)  ; Rsqrt(value)
  %169 = fmul fast float %168, %165
  %170 = fmul fast float %168, %166
  %171 = fsub fast float -0.000000e+00, %116
  %172 = fsub fast float -0.000000e+00, %117
  %173 = fsub fast float -0.000000e+00, %135
  %174 = fsub fast float -0.000000e+00, %136
  %175 = fsub fast float -0.000000e+00, %154
  %176 = fsub fast float -0.000000e+00, %155
  %177 = fmul fast float %111, %115
  %178 = fsub fast float -0.000000e+00, %177
  %179 = call float @dx.op.tertiary.f32(i32 46, float %171, float %112, float %178)  ; FMad(a,b,c)
  %180 = call float @dx.op.tertiary.f32(i32 46, float %172, float %113, float %179)  ; FMad(a,b,c)
  %181 = fmul fast float %111, %134
  %182 = fsub fast float -0.000000e+00, %181
  %183 = call float @dx.op.tertiary.f32(i32 46, float %173, float %112, float %182)  ; FMad(a,b,c)
  %184 = call float @dx.op.tertiary.f32(i32 46, float %174, float %113, float %183)  ; FMad(a,b,c)
  %185 = fmul fast float %111, %153
  %186 = fsub fast float -0.000000e+00, %185
  %187 = call float @dx.op.tertiary.f32(i32 46, float %175, float %112, float %186)  ; FMad(a,b,c)
  %188 = call float @dx.op.tertiary.f32(i32 46, float %176, float %113, float %187)  ; FMad(a,b,c)
  %189 = fmul fast float %126, %111
  %190 = fmul fast float %189, %130
  %191 = call float @dx.op.tertiary.f32(i32 46, float %131, float %112, float %190)  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %132, float %113, float %191)  ; FMad(a,b,c)
  %193 = fmul fast float %145, %111
  %194 = fmul fast float %193, %149
  %195 = call float @dx.op.tertiary.f32(i32 46, float %150, float %112, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %151, float %113, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %164, %111
  %198 = fmul fast float %197, %168
  %199 = call float @dx.op.tertiary.f32(i32 46, float %169, float %112, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %170, float %113, float %199)  ; FMad(a,b,c)
  %201 = fcmp fast olt float %180, 0.000000e+00
  %202 = fcmp fast olt float %184, 0.000000e+00
  %203 = fcmp fast olt float %188, 0.000000e+00
  %204 = select i1 %201, float 0.000000e+00, float 1.000000e+00
  %205 = select i1 %202, float 0.000000e+00, float 1.000000e+00
  %206 = select i1 %203, float 0.000000e+00, float 1.000000e+00
  %207 = fmul fast float %204, %180
  %208 = fmul fast float %205, %184
  %209 = fmul fast float %206, %188
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 3
  %212 = call float @dx.op.binary.f32(i32 35, float %192, float 0.000000e+00)  ; FMax(a,b)
  %213 = call float @dx.op.binary.f32(i32 35, float %196, float 0.000000e+00)  ; FMax(a,b)
  %214 = call float @dx.op.binary.f32(i32 35, float %200, float 0.000000e+00)  ; FMax(a,b)
  %215 = fmul fast float %212, %204
  %216 = fmul fast float %213, %205
  %217 = fmul fast float %214, %206
  %218 = call float @dx.op.unary.f32(i32 23, float %215)  ; Log(value)
  %219 = call float @dx.op.unary.f32(i32 23, float %216)  ; Log(value)
  %220 = call float @dx.op.unary.f32(i32 23, float %217)  ; Log(value)
  %221 = fmul fast float %218, %211
  %222 = fmul fast float %219, %211
  %223 = fmul fast float %220, %211
  %224 = call float @dx.op.unary.f32(i32 21, float %221)  ; Exp(value)
  %225 = call float @dx.op.unary.f32(i32 21, float %222)  ; Exp(value)
  %226 = call float @dx.op.unary.f32(i32 21, float %223)  ; Exp(value)
  %227 = fmul fast float %224, %180
  %228 = fmul fast float %225, %184
  %229 = fmul fast float %226, %188
  %230 = fmul fast float %207, %119
  %231 = call float @dx.op.tertiary.f32(i32 46, float %208, float %138, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %209, float %157, float %231)  ; FMad(a,b,c)
  %233 = fmul fast float %207, %120
  %234 = call float @dx.op.tertiary.f32(i32 46, float %208, float %139, float %233)  ; FMad(a,b,c)
  %235 = call float @dx.op.tertiary.f32(i32 46, float %209, float %158, float %234)  ; FMad(a,b,c)
  %236 = fmul fast float %207, %121
  %237 = call float @dx.op.tertiary.f32(i32 46, float %208, float %140, float %236)  ; FMad(a,b,c)
  %238 = call float @dx.op.tertiary.f32(i32 46, float %209, float %159, float %237)  ; FMad(a,b,c)
  %239 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %240 = extractvalue %dx.types.CBufRet.f32 %239, 0
  %241 = extractvalue %dx.types.CBufRet.f32 %239, 1
  %242 = extractvalue %dx.types.CBufRet.f32 %239, 2
  %243 = fmul fast float %240, %232
  %244 = fmul fast float %241, %235
  %245 = fmul fast float %242, %238
  %246 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.f32 %246, 0
  %248 = extractvalue %dx.types.CBufRet.f32 %246, 1
  %249 = extractvalue %dx.types.CBufRet.f32 %246, 2
  %250 = fadd fast float %243, %247
  %251 = fadd fast float %244, %248
  %252 = fadd fast float %245, %249
  %253 = fmul fast float %227, %123
  %254 = call float @dx.op.tertiary.f32(i32 46, float %228, float %142, float %253)  ; FMad(a,b,c)
  %255 = call float @dx.op.tertiary.f32(i32 46, float %229, float %161, float %254)  ; FMad(a,b,c)
  %256 = fmul fast float %227, %124
  %257 = call float @dx.op.tertiary.f32(i32 46, float %228, float %143, float %256)  ; FMad(a,b,c)
  %258 = call float @dx.op.tertiary.f32(i32 46, float %229, float %162, float %257)  ; FMad(a,b,c)
  %259 = fmul fast float %227, %125
  %260 = call float @dx.op.tertiary.f32(i32 46, float %228, float %144, float %259)  ; FMad(a,b,c)
  %261 = call float @dx.op.tertiary.f32(i32 46, float %229, float %163, float %260)  ; FMad(a,b,c)
  %262 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %263 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %264 = extractvalue %dx.types.CBufRet.f32 %210, 2
  %265 = fmul fast float %262, %255
  %266 = fmul fast float %263, %258
  %267 = fmul fast float %264, %261
  %268 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %269 = extractvalue %dx.types.ResRet.f32 %268, 0
  %270 = extractvalue %dx.types.ResRet.f32 %268, 1
  %271 = extractvalue %dx.types.ResRet.f32 %268, 2
  %272 = extractvalue %dx.types.ResRet.f32 %268, 3
  %273 = fmul fast float %272, %9
  %274 = fmul fast float %250, %6
  %275 = fmul fast float %274, %269
  %276 = fmul fast float %251, %7
  %277 = fmul fast float %276, %270
  %278 = fmul fast float %252, %8
  %279 = fmul fast float %278, %271
  %280 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %281 = extractvalue %dx.types.ResRet.f32 %280, 0
  %282 = extractvalue %dx.types.ResRet.f32 %280, 1
  %283 = extractvalue %dx.types.ResRet.f32 %280, 2
  %284 = fmul fast float %265, %273
  %285 = fmul fast float %284, %281
  %286 = fmul fast float %266, %273
  %287 = fmul fast float %286, %282
  %288 = fmul fast float %267, %273
  %289 = fmul fast float %288, %283
  %290 = fadd fast float %285, %275
  %291 = fadd fast float %287, %277
  %292 = fadd fast float %289, %279
  %293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %294 = extractvalue %dx.types.CBufRet.f32 %293, 0
  %295 = extractvalue %dx.types.CBufRet.f32 %293, 1
  %296 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %297 = fmul fast float %294, %273
  %298 = fmul fast float %295, %273
  %299 = fmul fast float %296, %273
  %300 = fsub fast float %297, %290
  %301 = fsub fast float %298, %291
  %302 = fsub fast float %299, %292
  %303 = fmul fast float %300, %16
  %304 = fmul fast float %301, %16
  %305 = fmul fast float %302, %16
  %306 = fadd fast float %303, %290
  %307 = fadd fast float %304, %291
  %308 = fadd fast float %305, %292
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %306)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %307)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %308)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %273)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !10, !12}
!5 = !{!6, !8, !9}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{!11}
!11 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!12 = !{!13}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!15 = !{void ()* @PSNormalPixelLightingTx, !"PSNormalPixelLightingTx", !16, !4, null}
!16 = !{!17, !28, null}
!17 = !{!18, !21, !24, !27}
!18 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 2, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 3}
!21 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !23}
!22 = !{i32 1}
!23 = !{i32 3, i32 15}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 3, i32 2, i8 0, !26}
!25 = !{i32 2}
!26 = !{i32 3, i32 7}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 3, i8 0, !23}
!28 = !{!29}
!29 = !{i32 0, !"SV_Target", i8 9, i8 16, !19, i8 0, i32 1, i8 4, i32 0, i8 0, !23}

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTx[] = {
  0x44, 0x58, 0x42, 0x43, 0x66, 0x75, 0x6a, 0x86, 0x6f, 0x6e, 0x91, 0x75,
  0x26, 0x28, 0x32, 0x30, 0x52, 0x5f, 0xe3, 0x19, 0x01, 0x00, 0x00, 0x00,
  0x17, 0x15, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0x8f, 0x02, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00, 0xbb, 0x03, 0x00, 0x00,
  0xd7, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43,
  0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x32, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67,
  0x65, 0x74, 0x00, 0x50, 0x53, 0x56, 0x30, 0x4c, 0x01, 0x00, 0x00, 0x24,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03,
  0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
  0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb4,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xc0,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01,
  0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x49,
  0x4c, 0x44, 0x4e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x4e, 0x6f, 0x72, 0x6d,
  0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
  0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78, 0x65,
  0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x2e,
  0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x62, 0xbf, 0x4c, 0xe8,
  0x8d, 0x0d, 0xf1, 0xfb, 0x15, 0x21, 0x4d, 0x77, 0x0a, 0xff, 0x5e, 0x44,
  0x58, 0x49, 0x4c, 0x38, 0x11, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x4e,
  0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x20, 0x11, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21,
  0x0c, 0x00, 0x00, 0x45, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41,
  0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25,
  0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42,
  0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a,
  0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00,
  0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41,
  0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51,
  0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff,
  0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff,
  0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
  0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13,
  0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89,
  0x20, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20,
  0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84,
  0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10,
  0xbc, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0,
  0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c,
  0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa8, 0xe1, 0xf2, 0x27, 0xec, 0x21,
  0x24, 0x9f, 0xdb, 0xa8, 0x62, 0x25, 0x26, 0xbf, 0xb8, 0x6d, 0x44, 0x0c,
  0xc3, 0x30, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f,
  0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a, 0xa1, 0x10, 0x0c, 0x41, 0x4d,
  0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29, 0xc3, 0x40, 0x0c,
  0x14, 0xdd, 0x34, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0xaf, 0x84, 0xb4,
  0x12, 0x93, 0x5f, 0xdc, 0x36, 0x2a, 0x86, 0x61, 0x18, 0x88, 0xc2, 0x4c,
  0x04, 0xc3, 0x0c, 0xc3, 0x30, 0x10, 0x04, 0x31, 0x10, 0x55, 0x8c, 0x81,
  0x18, 0x86, 0x61, 0x20, 0xab, 0x10, 0x03, 0x31, 0x0c, 0x84, 0x95, 0x62,
  0x20, 0x86, 0x61, 0x20, 0x6d, 0x8e, 0x20, 0x28, 0x06, 0x43, 0x14, 0x04,
  0xc1, 0x51, 0x37, 0x10, 0x30, 0x8c, 0x40, 0x0c, 0x33, 0xb5, 0xc1, 0x38,
  0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e,
  0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d,
  0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b,
  0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01, 0x18,
  0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f,
  0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80, 0x98, 0x49, 0x0c, 0xc6,
  0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0,
  0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec,
  0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8,
  0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f, 0xc0,
  0xc0, 0x0f, 0x90, 0x00, 0x86, 0x24, 0x0e, 0x23, 0x0c, 0xc3, 0x4c, 0x6d,
  0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5,
  0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c,
  0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6,
  0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x30, 0x07, 0x7e,
  0x00, 0x06, 0x7e, 0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3,
  0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x20, 0x66, 0x12,
  0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28,
  0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0,
  0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30,
  0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x83, 0x39, 0xf0,
  0x03, 0x30, 0xf0, 0x03, 0x24, 0x90, 0x25, 0x99, 0x39, 0x40, 0x26, 0x01,
  0x78, 0xde, 0x70, 0xf9, 0xc0, 0x82, 0x18, 0x0d, 0x43, 0x34, 0x93, 0xbf,
  0x10, 0x06, 0x20, 0x60, 0x7e, 0x0a, 0x44, 0x00, 0x43, 0x4c, 0x44, 0x24,
  0xa1, 0x06, 0x24, 0xc9, 0x01, 0x45, 0x51, 0x92, 0x04, 0x53, 0x34, 0x25,
  0xf5, 0x26, 0x69, 0x8a, 0x28, 0x61, 0xf2, 0x59, 0x80, 0x79, 0x16, 0x22,
  0x62, 0x27, 0x60, 0x22, 0x50, 0x40, 0x10, 0x9b, 0x12, 0x04, 0x00, 0x13,
  0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68,
  0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a,
  0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71,
  0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d,
  0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x34, 0x40,
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x79,
  0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8,
  0x13, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x21, 0x8f, 0x05, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x43, 0x1e, 0x0c, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x3a, 0x20, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c,
  0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x14,
  0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x80, 0x0d, 0xca, 0xa0, 0x3c, 0xca, 0x81,
  0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1, 0x71,
  0x06, 0x80, 0xce, 0x19, 0x00, 0x5a, 0x67, 0x00, 0xa8, 0x9d, 0x01, 0x20,
  0x77, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00, 0x8e, 0xe3, 0x38, 0x8e, 0xe3,
  0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x74,
  0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x83,
  0x0c, 0x6f, 0x0c, 0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10, 0x88,
  0x65, 0x82, 0x40, 0x30, 0x1b, 0x84, 0x81, 0x98, 0x20, 0x10, 0xcd, 0x06,
  0x61, 0x30, 0x28, 0xc0, 0xcd, 0x4d, 0x10, 0x08, 0x67, 0xc3, 0x80, 0x24,
  0xc4, 0x04, 0x61, 0x0c, 0x36, 0x02, 0x13, 0x04, 0xe2, 0x99, 0x20, 0x10,
  0xd0, 0x06, 0x81, 0x70, 0x36, 0x24, 0xc4, 0xc2, 0x10, 0xc4, 0xd0, 0x10,
  0xcf, 0x04, 0xe1, 0x0c, 0xb8, 0x0d, 0xc9, 0x10, 0x31, 0xc4, 0x30, 0x34,
  0xc4, 0xb3, 0x21, 0x69, 0x22, 0x86, 0x68, 0x86, 0x86, 0x78, 0x36, 0x0c,
  0x90, 0x34, 0x4d, 0x10, 0xd6, 0xa0, 0x9b, 0x20, 0x10, 0xd1, 0x06, 0x84,
  0xa8, 0x18, 0x82, 0x18, 0x2c, 0x60, 0x43, 0x70, 0x4d, 0x10, 0xda, 0xc0,
  0xdb, 0x80, 0x10, 0x19, 0x43, 0x10, 0x03, 0x01, 0x6c, 0x08, 0xb4, 0x0d,
  0x04, 0x05, 0x60, 0xdb, 0x04, 0xc1, 0x0d, 0xbe, 0x0d, 0x41, 0x37, 0x41,
  0x10, 0x00, 0x5e, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50,
  0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
  0x54, 0x78, 0x44, 0xa8, 0x8a, 0xb0, 0x86, 0x9e, 0x9e, 0xa4, 0x88, 0x26,
  0x08, 0x45, 0x35, 0x41, 0x28, 0xac, 0x0d, 0x01, 0x31, 0x41, 0x28, 0xae,
  0x09, 0x02, 0x21, 0x6d, 0x10, 0xcc, 0xc0, 0x0c, 0x36, 0x2c, 0x44, 0x18,
  0x88, 0xc1, 0x18, 0x90, 0x41, 0x19, 0x0c, 0x65, 0x40, 0x8c, 0xc1, 0x19,
  0x6c, 0x08, 0x86, 0x09, 0x42, 0x81, 0x4d, 0x10, 0x88, 0x69, 0x83, 0x60,
  0x06, 0x6b, 0xb0, 0x61, 0x19, 0xc2, 0x40, 0x0c, 0xc6, 0x20, 0x0d, 0xca,
  0x60, 0x50, 0x83, 0x61, 0x0c, 0xd8, 0x60, 0x43, 0xd0, 0x4c, 0x10, 0x8a,
  0x6c, 0x82, 0x40, 0x50, 0x1b, 0x04, 0x33, 0x80, 0x83, 0x0d, 0x4b, 0x13,
  0x06, 0x62, 0x30, 0x06, 0x6e, 0x50, 0x06, 0xc3, 0x1b, 0x34, 0x63, 0x10,
  0x07, 0x2c, 0x86, 0x9e, 0x98, 0x9e, 0xa4, 0x36, 0x2c, 0x66, 0x30, 0x07,
  0x62, 0x30, 0x06, 0x64, 0x50, 0x06, 0x83, 0x1a, 0x98, 0xc1, 0x18, 0xb0,
  0xc1, 0x06, 0x02, 0x0d, 0xda, 0x40, 0x0e, 0xe8, 0x80, 0xc9, 0x94, 0xd5,
  0x17, 0x55, 0x98, 0xdc, 0x59, 0x19, 0xdd, 0x04, 0xa1, 0xd0, 0x36, 0x2c,
  0x84, 0x1d, 0x88, 0xc1, 0x1d, 0x90, 0xc1, 0x18, 0x0c, 0x6a, 0x40, 0x8c,
  0x01, 0x1b, 0x6c, 0x08, 0xf0, 0x60, 0xc3, 0x50, 0x07, 0x79, 0x00, 0x6c,
  0x28, 0x3e, 0x30, 0xd0, 0x03, 0x0e, 0xa8, 0xc2, 0xc6, 0x66, 0xd7, 0xe6,
  0x92, 0x46, 0x56, 0xe6, 0x46, 0x37, 0x25, 0x08, 0xaa, 0x90, 0xe1, 0xb9,
  0xd8, 0x95, 0xc9, 0xcd, 0xa5, 0xbd, 0xb9, 0x4d, 0x09, 0x88, 0x26, 0x64,
  0x78, 0x2e, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x02, 0xa3, 0x0e,
  0x19, 0x9e, 0xcb, 0x1c, 0x5a, 0x18, 0x59, 0x99, 0x5c, 0xd3, 0x1b, 0x59,
  0x19, 0xdb, 0x94, 0x20, 0x29, 0x43, 0x86, 0xe7, 0x22, 0x57, 0x36, 0xf7,
  0x56, 0x27, 0x37, 0x56, 0x36, 0x37, 0x25, 0xd8, 0xea, 0x90, 0xe1, 0xb9,
  0xd8, 0xa5, 0x95, 0xdd, 0x25, 0x91, 0x4d, 0xd1, 0x85, 0xd1, 0x95, 0x4d,
  0x09, 0xba, 0x3a, 0x64, 0x78, 0x2e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
  0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x02, 0x3d, 0x00, 0x00, 0x00, 0x79,
  0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4,
  0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c,
  0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00,
  0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2,
  0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38,
  0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d,
  0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87,
  0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87,
  0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30,
  0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde,
  0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b,
  0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c,
  0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07,
  0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87,
  0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87,
  0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87,
  0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0,
  0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc,
  0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4,
  0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39,
  0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38,
  0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b,
  0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc5, 0x61, 0x07, 0x76, 0xb0, 0x87,
  0x76, 0x70, 0x03, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x19, 0xd9, 0x43,
  0x0e, 0xf8, 0xe0, 0x06, 0xe8, 0xc0, 0x0e, 0x6e, 0x20, 0x0f, 0xe5, 0x30,
  0x0f, 0xef, 0x50, 0x0f, 0xf2, 0x30, 0x0e, 0xe5, 0xe0, 0x06, 0xe1, 0x40,
  0x0f, 0xf4, 0x20, 0x0f, 0xe9, 0x20, 0x0e, 0xf5, 0x40, 0x0f, 0xe5, 0x00,
  0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x06,
  0x70, 0xa5, 0xec, 0xe9, 0x44, 0x0c, 0xb0, 0xa4, 0xc8, 0x45, 0x2c, 0x25,
  0x62, 0x1c, 0x13, 0xd2, 0x18, 0xed, 0x65, 0x08, 0xd0, 0x70, 0xf9, 0xce,
  0xe3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x0d, 0x6c, 0xc3,
  0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43,
  0x49, 0x18, 0x80, 0x80, 0xf9, 0xc5, 0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x76,
  0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0, 0x4c, 0xb6, 0x5f, 0xdc, 0xb6,
  0x11, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7,
  0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd,
  0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x66, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x04, 0x30, 0xcf, 0x42, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe,
  0xf3, 0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5,
  0x6d, 0x5b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x11, 0x4d, 0x08,
  0x10, 0x61, 0x7e, 0x71, 0xdb, 0x56, 0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e,
  0xd5, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x0d, 0x61, 0x20, 0x00, 0x00, 0x4a,
  0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x13,
  0x00, 0x00, 0x00, 0xc4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94, 0x46,
  0x59, 0x14, 0x44, 0x51, 0x14, 0xd7, 0x0c, 0x40, 0x21, 0x94, 0x5d, 0xb9,
  0x95, 0x4c, 0xc9, 0x95, 0x69, 0x40, 0xa1, 0x06, 0x14, 0x5e, 0x19, 0x95,
  0x4b, 0xa9, 0x14, 0x46, 0xb1, 0x15, 0x0c, 0x0d, 0x63, 0x04, 0x20, 0x08,
  0x82, 0xf8, 0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x46,
  0x00, 0x82, 0x20, 0x88, 0x7f, 0x23, 0x00, 0x63, 0x04, 0x20, 0x08, 0x82,
  0x20, 0x28, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0xd0, 0xc9, 0x01, 0x64, 0x06, 0x6d, 0xd0, 0x06, 0xdc, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x74, 0x73, 0x10, 0x9d, 0x81, 0x1c, 0xc8, 0x41,
  0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x1d, 0x1d, 0x48, 0x68, 0x20,
  0x07, 0x72, 0xe0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x57, 0x07,
  0x93, 0x19, 0xcc, 0xc1, 0x1c, 0x7c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0xd0, 0xd9, 0x01, 0x95, 0x06, 0x74, 0x40, 0x07, 0x60, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x06, 0x28, 0x64, 0x6f, 0x50, 0x07, 0x6b, 0xa0,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x11, 0x0a, 0x1a, 0x1c, 0xd8,
  0x41, 0x18, 0x6c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x88, 0xc2,
  0x16, 0x07, 0x77, 0xc0, 0x06, 0xdc, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0xa3, 0xc0, 0xc9, 0x01, 0x1e, 0xac, 0x41, 0x37, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x06, 0x29, 0x74, 0x76, 0x90, 0x07, 0x6f, 0xe0, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x51, 0x0a, 0xde, 0x1d, 0xe8, 0x41,
  0x19, 0x7c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x98, 0xc2, 0x87,
  0x07, 0x7b, 0x00, 0x07, 0x60, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0xc6, 0x29, 0x80, 0x41, 0x1f, 0xf0, 0x81, 0x1c, 0x84, 0xc1, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x18, 0xa8, 0x10, 0x06, 0x7e, 0xd0, 0x07, 0x68,
  0x20, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xa4, 0x82, 0x18,
  0xfc, 0x81, 0x1f, 0xcc, 0xc1, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0xa1, 0x0a, 0x63, 0x00, 0x0a, 0x7f, 0x20, 0x07, 0x64, 0x30, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x2a, 0x90, 0x01, 0x28, 0x80, 0x82,
  0x1d, 0x94, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xac, 0x50,
  0x06, 0xa1, 0x10, 0x0a, 0x6c, 0x60, 0x06, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0xd0, 0xac, 0x42, 0x19, 0x38, 0xdb, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0xa0, 0xc4, 0xc7, 0x06, 0x25, 0x3e,
  0x36, 0x28, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0x27, 0x16,
  0xd6, 0x60, 0x10, 0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x20, 0x8a, 0x85, 0x35, 0x08, 0xac, 0x08, 0xe4, 0x63, 0x85, 0x20, 0x1f,
  0x2b, 0x06, 0xf9, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0x01, 0x45, 0x0b,
  0x6b, 0xd0, 0x6d, 0x4e, 0xf3, 0x7d, 0xae, 0xe0, 0x0a, 0x73, 0xf0, 0x8d,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x98, 0x60, 0x06, 0xf2, 0x31, 0xe1,
  0x0c, 0xe4, 0x63, 0x42, 0x1a, 0xc0, 0xc7, 0x04, 0x35, 0x80, 0xcf, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x58, 0xba, 0xd0, 0x06, 0x42, 0x20, 0x04,
  0xa6, 0x06, 0x41, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0xf2,
  0x05, 0x37, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0xfa, 0x85,
  0x3b, 0xe0, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x02, 0x07, 0x3c,
  0xe0, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x0a, 0x87, 0x3c, 0xe0,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x12, 0x87, 0x3c, 0xf8, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x1a, 0x07, 0x3d, 0xf8, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0x20, 0x22, 0x87, 0x3d, 0xf8, 0x46, 0x0c, 0x0c,
  0x00, 0x04, 0xc1, 0x20, 0x2a, 0x87, 0x3e, 0xf0, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0x20, 0x32, 0x07, 0x3f, 0xf0, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0x20, 0x3a, 0x07, 0x3f, 0x00, 0x83, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x88, 0xd0, 0xe1, 0x0f, 0xc0, 0xc0, 0x8a, 0x44, 0x3e, 0x76, 0x24,
  0xf2, 0x31, 0x21, 0x88, 0x8f, 0x29, 0x8b, 0x7c, 0x2c, 0x71, 0xe4, 0x63,
  0x42, 0x10, 0x1f, 0x63, 0x20, 0xf9, 0x98, 0x03, 0xc9, 0xc7, 0x84, 0x20,
  0x3e, 0x16, 0x3c, 0xf2, 0xb1, 0xe2, 0x91, 0x8f, 0x09, 0x41, 0x7c, 0x4c,
  0x89, 0xe4, 0x63, 0x05, 0x25, 0x1f, 0x13, 0x82, 0xf8, 0x98, 0x62, 0xc9,
  0xc7, 0x1c, 0x4b, 0x3e, 0x26, 0x04, 0xf1, 0xb1, 0x46, 0x93, 0x8f, 0x2d,
  0x9c, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xcd, 0x27, 0x1f, 0xa3, 0x3c, 0xf9,
  0x98, 0x10, 0xc4, 0xc7, 0xac, 0x30, 0x90, 0x8f, 0x51, 0x63, 0x20, 0x1f,
  0x13, 0x82, 0xf8, 0x18, 0xf4, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb4, 0x90, 0x20, 0x07, 0x0f, 0x09, 0xec, 0x09, 0x03, 0xf9, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x36, 0x12, 0xe6, 0x00, 0x06, 0x47,
  0x60, 0xce, 0x18, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4,
  0x92, 0x40, 0x07, 0x31, 0x30, 0x82, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30,
  0x78, 0x56, 0xa2, 0x1c, 0x8a, 0x21, 0x28, 0x86, 0x60, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0xa2, 0x95, 0x28, 0x87, 0xc0, 0x30, 0x33, 0x90, 0xcf,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x29, 0xc1, 0x0e, 0x65, 0x00,
  0x05, 0x76, 0xa1, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40,
  0x5b, 0x09, 0x77, 0x38, 0x83, 0x27, 0x30, 0x4b, 0x0d, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x5a, 0x4b, 0xc0, 0x43, 0x1a, 0x38, 0xc1,
  0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x3c, 0x33, 0xd1, 0x0e, 0xc5, 0x10,
  0x14, 0x43, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xd1, 0x4c, 0xb4,
  0x43, 0x60, 0xc1, 0x21, 0x1f, 0x13, 0x0c, 0xf9, 0xd8, 0x50, 0xc8, 0xc7,
  0xa4, 0x3e, 0x90, 0x8f, 0x05, 0x8d, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x40, 0xab, 0x09, 0x7c, 0xf0, 0x83, 0x22, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x03, 0xcd, 0x26, 0xf2, 0x81, 0x0f, 0x74, 0x21, 0x30, 0x2a,
  0x14, 0xe4, 0x63, 0x41, 0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xd0, 0x72, 0x82, 0x1f, 0x44, 0x01, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x40, 0xd3, 0x89, 0x7e, 0x00, 0x85, 0x5e, 0x08, 0xcc, 0x2a, 0x05,
  0xf9, 0x58, 0x50, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4,
  0x9e, 0x00, 0x09, 0x53, 0x58, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xd0, 0x7c, 0x22, 0x24, 0x48, 0x01, 0x1c, 0x82, 0x11, 0x83, 0x05, 0x00,
  0x41, 0x30, 0x78, 0xc8, 0xc2, 0x1f, 0x92, 0x22, 0x48, 0x8a, 0x60, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0xb2, 0xf0, 0x87, 0xc0, 0x82, 0x45,
  0x3e, 0x26, 0x20, 0xf2, 0xb1, 0xa1, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x34, 0x6a, 0x41, 0x12, 0xed, 0xb0, 0x13, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x8d, 0x5b, 0xa0, 0x44, 0x3c, 0x8c, 0xc5, 0x68, 0x42, 0x00,
  0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x41, 0x23, 0x17, 0x2c, 0x51, 0x0f, 0x65, 0x31, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x26, 0x0e, 0x4b, 0x7c, 0x4c,
  0x1c, 0x96, 0xf8, 0x98, 0x38, 0x2c, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10,
  0x04, 0x83, 0x07, 0x2f, 0x64, 0x62, 0x10, 0x82, 0x41, 0x08, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0x20, 0xc2, 0x0b, 0x99, 0x08, 0x2c, 0x20, 0xe4,
  0x63, 0x02, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x68, 0xfa,
  0xe2, 0x26, 0x40, 0x02, 0x27, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x9a, 0xd0,
  0xd8, 0x09, 0x92, 0x80, 0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xa6, 0x34,
  0x7e, 0x02, 0x25, 0xc6, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0x34, 0x61, 0x10, 0xac, 0x1e, 0x96, 0xf8, 0x58, 0x3d, 0x2c, 0xf1, 0xb1,
  0x7a, 0x58, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xcf, 0x6a,
  0x94, 0xc5, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x41, 0xb4, 0x1a, 0x65, 0x11, 0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xd0, 0xc0, 0x86, 0x5a, 0xcc, 0x84,
  0x69, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x34, 0xb4, 0xe1, 0x16, 0x37, 0x31,
  0x17, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x0d, 0x6e, 0xc8, 0xc5, 0x4e, 0xe0,
  0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x18,
  0x4a, 0x2c, 0xf1, 0x31, 0x94, 0x58, 0xe2, 0x63, 0x28, 0xb1, 0xc4, 0x67,
  0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x1e, 0xdf, 0xc0, 0x8b, 0x41, 0x08,
  0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xc8, 0x37, 0xf0,
  0x22, 0xb0, 0x80, 0x90, 0x8f, 0x09, 0x84, 0x7c, 0x8c, 0x2d, 0xee, 0x20,
  0x3e, 0xd6, 0x16, 0x77, 0x10, 0x1f, 0x73, 0x0b, 0x33, 0x88, 0x8f, 0xbd,
  0x85, 0x19, 0xc4, 0xc7, 0xe0, 0xa2, 0x8a, 0x8f, 0xc5, 0x45, 0x15, 0x1f,
  0x13, 0x05, 0x3f, 0x90, 0x8f, 0xcd, 0x45, 0x10, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xd0, 0xca, 0x03, 0x35, 0x90, 0x51, 0x08, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0x40, 0x33, 0x8f, 0xd4, 0x40, 0x46, 0x21, 0x30,
  0x53, 0x78, 0x03, 0xf9, 0xd8, 0x5d, 0x04, 0xf1, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x03, 0x2d, 0x3d, 0x58, 0x43, 0x39, 0x85, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x34, 0xf5, 0x68, 0x0d, 0xe5, 0x14, 0x02, 0x53,
  0x05, 0x30, 0x90, 0x8f, 0xed, 0x45, 0x10, 0x9f, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xd0, 0xda, 0x03, 0x36, 0x98, 0x55, 0x08, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x40, 0x73, 0x8f, 0xd8, 0x60, 0x56, 0x21, 0xb0, 0x3f,
  0x70, 0x05, 0xf9, 0x58, 0xc0, 0x07, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x03, 0x2d, 0x3e, 0x68, 0x83, 0x0f, 0x5e, 0x21, 0x18, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x03, 0x4d, 0x3e, 0x6a, 0x83, 0x0f, 0x5e, 0x21, 0x30,
  0x38, 0x90, 0x05, 0xf9, 0x58, 0xd0, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x03, 0xad, 0x3e, 0x70, 0xa3, 0x0d, 0x66, 0x21, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x03, 0xcd, 0x3e, 0x72, 0xa3, 0x0d, 0x66, 0x21,
  0xb0, 0x30, 0xb0, 0x05, 0xf9, 0x58, 0xe0, 0xc9, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xb4, 0xfc, 0xe0, 0x0d, 0xef, 0x16, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xd0, 0xf4, 0xa3, 0x37, 0xbc, 0x5b, 0x08, 0x86,
  0x23, 0xaa, 0xd5, 0x20, 0xbe, 0xe1, 0x08, 0x89, 0x35, 0x88, 0x6f, 0x38,
  0xe2, 0x69, 0x0d, 0xe2, 0x9b, 0x6e, 0x70, 0x8d, 0xd7, 0x18, 0xa6, 0x1b,
  0x5e, 0x03, 0x36, 0x86, 0xe9, 0x06, 0xd8, 0x88, 0x8d, 0xc1, 0x86, 0x4d,
  0x3e, 0x36, 0x60, 0xf2, 0xb1, 0xa1, 0x92, 0xcf, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x34, 0x2a, 0x42, 0x1e, 0xad, 0xe1, 0x1f, 0xa3, 0x09, 0xc1,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd8, 0x89, 0xfc, 0x06, 0x65,
  0x1b, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xa1, 0x08, 0x78, 0x44,
  0xb7, 0x31, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x58, 0x8a, 0x84, 0x87,
  0x83, 0x1b, 0x36, 0x2c, 0xf2, 0xb1, 0x61, 0x91, 0x8f, 0x0d, 0x8b, 0x7c,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x82, 0x11, 0xf2, 0x18, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x8a, 0x91, 0xf2, 0x18, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0x20, 0x92, 0x11, 0xf3, 0x18, 0x6c, 0x50, 0xe4,
  0x63, 0xc3, 0x22, 0x1f, 0x1b, 0x18, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x41, 0x64, 0x23, 0xe9, 0x31, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x41, 0x74, 0x23, 0xea, 0x31, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41,
  0x84, 0x23, 0xeb, 0x31, 0xd8, 0xf0, 0x06, 0xf2, 0xb1, 0x81, 0x0d, 0xe4,
  0x63, 0x43, 0x1a, 0xc8, 0xc7, 0xae, 0x77, 0x90, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x68, 0x39, 0xc2, 0x1f, 0x57, 0x2f, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0xa0, 0xe9, 0x48, 0x7f, 0x5c, 0xab, 0x10, 0x98,
  0x16, 0x0f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x8d, 0x47,
  0xfe, 0x43, 0xfb, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4,
  0x1e, 0x01, 0x11, 0xad, 0x15, 0x02, 0xeb, 0xe6, 0x41, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0xa0, 0xfd, 0x88, 0x88, 0x74, 0xe1, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x06, 0x26, 0x23, 0xd2, 0xbd, 0x42,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xcd, 0x99, 0x84, 0x88, 0x7a,
  0xf8, 0xc8, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0xd8, 0xb0, 0xc8, 0xc7, 0x86, 0x44, 0x3e, 0x36, 0x1c, 0xf2, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0xc6, 0x4d, 0x50, 0x24, 0x3e, 0xcc, 0x64,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0xec, 0x18,
  0xe0, 0x63, 0xc7, 0x00, 0x1f, 0x3b, 0x06, 0xf8, 0x98, 0x26, 0x12, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x0d, 0x4e, 0x66, 0x44, 0x83,
  0x87, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0x38, 0xa1, 0x11,
  0xcd, 0x17, 0x02, 0xeb, 0x48, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0xa0, 0xcd, 0x89, 0x8d, 0x74, 0xf2, 0x10, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x81, 0x46, 0x27, 0x37, 0xd2, 0x81, 0x43, 0x60, 0x60, 0x60,
  0x12, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0xcd, 0x4e, 0x72,
  0x04, 0x0c, 0xe8, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0xed,
  0x4e, 0x74, 0x04, 0x0c, 0xc4, 0x21, 0x18, 0x4d, 0xa0, 0x03, 0x60, 0x34,
  0xa1, 0x0e, 0x82, 0xd1, 0x04, 0x3b, 0x10, 0x6c, 0x50, 0xe4, 0x63, 0x03,
  0x22, 0x1f, 0x1b, 0x0c, 0xf9, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0x01,
  0x15, 0x2a, 0x38, 0x92, 0x22, 0x28, 0xb2, 0x1f, 0xfa, 0xc1, 0x22, 0x2c,
  0xb2, 0x27, 0x7b, 0x02, 0x26, 0x2c, 0x32, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0x01, 0x8a, 0xc8,
  0xc7, 0x30, 0x16, 0x91, 0x8f, 0x05, 0x86, 0x7c, 0x2c, 0x6b, 0x11, 0xf9,
  0x58, 0x70, 0xc8, 0xc7, 0x34, 0x17, 0x91, 0x8f, 0x05, 0x88, 0x7c, 0x46,
  0x0c, 0x1e, 0x00, 0x04, 0xc1, 0x80, 0x6a, 0x15, 0x32, 0xb9, 0x11, 0x1a,
  0x39, 0x11, 0x13, 0xc1, 0x11, 0x1c, 0x39, 0x95, 0x53, 0x61, 0x13, 0x1c,
  0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x9b,
  0x16, 0xf9, 0x58, 0x40, 0xc8, 0xc7, 0xa8, 0x46, 0x3e, 0x16, 0x14, 0xf2,
  0xb1, 0xea, 0x91, 0x8f, 0x05, 0x86, 0x7c, 0xac, 0x78, 0xe0, 0x63, 0x84,
  0x03, 0x1f, 0x1b, 0x1a, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41,
  0xd3, 0x2b, 0x77, 0x02, 0x26, 0x7e, 0x32, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0x36, 0x60, 0xf2, 0xb1, 0x21, 0x93, 0x8f,
  0x0d, 0x9a, 0x7c, 0x6c, 0x50, 0xe2, 0x63, 0x83, 0x12, 0x1f, 0x1b, 0x94,
  0xf8, 0xd8, 0xf0, 0x23, 0xf2, 0xb1, 0x01, 0x4c, 0xe4, 0x63, 0x43, 0x98,
  0xc8, 0xc7, 0x06, 0x08, 0x3e, 0x36, 0x40, 0xf0, 0xb1, 0x01, 0x82, 0xcf,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0xee, 0x32, 0x2e, 0xe4, 0x42,
  0x2e, 0xba, 0x32, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xe2, 0x2e,
  0xe3, 0x42, 0x2e, 0xe4, 0xf2, 0x2a, 0xc2, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x20, 0xee, 0x32, 0x2e, 0xe4, 0x42, 0x2e, 0xb9, 0x12, 0x8c, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x01, 0xe2, 0x2e, 0xe3, 0x42, 0x2e, 0xe4, 0x72,
  0x2b, 0x64, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
